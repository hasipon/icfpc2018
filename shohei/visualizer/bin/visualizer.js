// Generated by Haxe 3.4.5
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Bot = function(id,x,y,z) {
	this.id = id;
	this.y = y;
	this.z = z;
	this.x = x;
	var this1 = new Array(20);
	this.seeds = this1;
	this.isActive = false;
	this.isNextActive = false;
};
Bot.__name__ = true;
Bot.prototype = {
	move: function(direction,length) {
		switch(direction[1]) {
		case 0:
			this.x += length;
			break;
		case 1:
			this.y += length;
			break;
		case 2:
			this.z += length;
			break;
		}
	}
	,'goto': function(x,y,z) {
		this.y = y;
		this.z = z;
		this.x = x;
	}
	,forward: function() {
		this.isActive = this.isNextActive;
	}
	,__class__: Bot
};
var Command = { __ename__ : true, __constructs__ : ["Halt","Flip","Wait","SMove","LMove","Fission","Fill","FussionP","FussionS"] };
Command.Halt = ["Halt",0];
Command.Halt.toString = $estr;
Command.Halt.__enum__ = Command;
Command.Flip = ["Flip",1];
Command.Flip.toString = $estr;
Command.Flip.__enum__ = Command;
Command.Wait = ["Wait",2];
Command.Wait.toString = $estr;
Command.Wait.__enum__ = Command;
Command.SMove = function(direction,length,fromX,fromY,fromZ) { var $x = ["SMove",3,direction,length,fromX,fromY,fromZ]; $x.__enum__ = Command; $x.toString = $estr; return $x; };
Command.LMove = function(direction0,length0,direction1,length1,fromX,fromY,fromZ) { var $x = ["LMove",4,direction0,length0,direction1,length1,fromX,fromY,fromZ]; $x.__enum__ = Command; $x.toString = $estr; return $x; };
Command.Fission = function(nd,m) { var $x = ["Fission",5,nd,m]; $x.__enum__ = Command; $x.toString = $estr; return $x; };
Command.Fill = function(nd) { var $x = ["Fill",6,nd]; $x.__enum__ = Command; $x.toString = $estr; return $x; };
Command.FussionP = function(id,pSeeds) { var $x = ["FussionP",7,id,pSeeds]; $x.__enum__ = Command; $x.toString = $estr; return $x; };
Command.FussionS = ["FussionS",8];
Command.FussionS.toString = $estr;
Command.FussionS.__enum__ = Command;
var Direction = { __ename__ : true, __constructs__ : ["X","Y","Z"] };
Direction.X = ["X",0];
Direction.X.toString = $estr;
Direction.X.__enum__ = Direction;
Direction.Y = ["Y",1];
Direction.Y.toString = $estr;
Direction.Y.__enum__ = Direction;
Direction.Z = ["Z",2];
Direction.Z.toString = $estr;
Direction.Z.__enum__ = Direction;
var Game = function(sourceModelInput,targetModelInput) {
	this.targetModelInput = targetModelInput;
	this.sourceModelInput = sourceModelInput;
	this.init();
};
Game.__name__ = true;
Game.abs = function(value) {
	if(value < 0) {
		return -value;
	} else {
		return value;
	}
};
Game.createVector3D = function(size,defaultValue) {
	var this1 = new Array(size);
	var result = this1;
	var _g1 = 0;
	var _g = size;
	while(_g1 < _g) {
		var i = _g1++;
		var this2 = new Array(size);
		result[i] = this2;
		var _g3 = 0;
		var _g2 = size;
		while(_g3 < _g2) {
			var j = _g3++;
			var this3 = new Array(size);
			result[i][j] = this3;
			var _g5 = 0;
			var _g4 = size;
			while(_g5 < _g4) {
				var k = _g5++;
				result[i][j][k] = defaultValue;
			}
		}
	}
	return result;
};
Game.prototype = {
	get_isStepTop: function() {
		return 20 <= this.botIndex;
	}
	,init: function() {
		var _g = this.targetModelInput;
		switch(_g[1]) {
		case 0:
			var targetModelInput = _g[2];
			targetModelInput.set_position(0);
			this.size = targetModelInput.readByte();
			haxe_Log.trace(targetModelInput,{ fileName : "Game.hx", lineNumber : 44, className : "Game", methodName : "init"});
			break;
		case 1:
			break;
		}
		var _g1 = this.sourceModelInput;
		switch(_g1[1]) {
		case 0:
			var sourceModelInput = _g1[2];
			haxe_Log.trace(sourceModelInput,{ fileName : "Game.hx", lineNumber : 50, className : "Game", methodName : "init"});
			sourceModelInput.set_position(0);
			this.size = sourceModelInput.readByte();
			break;
		case 1:
			break;
		}
		haxe_Log.trace(this.size,{ fileName : "Game.hx", lineNumber : 56, className : "Game", methodName : "init"});
		this.highHarmonics = false;
		var _g2 = [];
		var _g3 = 0;
		while(_g3 < 20) {
			var i = _g3++;
			_g2.push(new Bot(i,0,0,0));
		}
		this.bots = _g2;
		this.bots[0].isActive = true;
		this.bots[0].isNextActive = true;
		var _g31 = 1;
		while(_g31 < 20) {
			var i1 = _g31++;
			this.bots[0].seeds[i1] = true;
		}
		this.energy = 0;
		this.step = 0;
		this.botIndex = 20;
		this.volatiles = Game.createVector3D(this.size,0);
		this.currentModel = Game.createVector3D(this.size,false);
		this.targetModel = Game.createVector3D(this.size,false);
		var _g32 = this.sourceModelInput;
		switch(_g32[1]) {
		case 0:
			var sourceModelInput1 = _g32[2];
			var restCount = 0;
			var restValue = 0;
			var _g4 = 0;
			var _g33 = this.size;
			while(_g4 < _g33) {
				var x = _g4++;
				var _g6 = 0;
				var _g5 = this.size;
				while(_g6 < _g5) {
					var y = _g6++;
					var _g8 = 0;
					var _g7 = this.size;
					while(_g8 < _g7) {
						var z = _g8++;
						if(restCount == 0) {
							restValue = sourceModelInput1.readByte();
							restCount = 8;
						}
						--restCount;
						this.currentModel[x][y][z] = (restValue & 1 << 7 - restCount) != 0;
					}
				}
			}
			break;
		case 1:
			break;
		}
		var _g41 = this.targetModelInput;
		switch(_g41[1]) {
		case 0:
			var targetModelInput1 = _g41[2];
			var restCount1 = 0;
			var restValue1 = 0;
			var _g51 = 0;
			var _g42 = this.size;
			while(_g51 < _g42) {
				var x1 = _g51++;
				var _g71 = 0;
				var _g61 = this.size;
				while(_g71 < _g61) {
					var y1 = _g71++;
					var _g9 = 0;
					var _g81 = this.size;
					while(_g9 < _g81) {
						var z1 = _g9++;
						if(restCount1 == 0) {
							restValue1 = targetModelInput1.readByte();
							restCount1 = 8;
						}
						--restCount1;
						this.targetModel[x1][y1][z1] = (restValue1 & 1 << 7 - restCount1) != 0;
					}
				}
			}
			break;
		case 1:
			break;
		}
	}
	,startStep: function() {
		var _g = 0;
		var _g1 = this.bots;
		while(_g < _g1.length) {
			var bot = _g1[_g];
			++_g;
			bot.forward();
			if(bot.isActive) {
				this.energy += 20;
			}
		}
		this.botIndex = 0;
		while(this.botIndex < 20) {
			if(this.bots[this.botIndex].isActive) {
				break;
			}
			this.botIndex += 1;
		}
		if(this.highHarmonics) {
			this.energy += this.size * this.size * this.size * 30;
		} else {
			this.energy += this.size * this.size * this.size * 3;
		}
	}
	,forward: function(command) {
		var currentBot = this.bots[this.botIndex];
		switch(command[1]) {
		case 0:
			break;
		case 1:
			this.highHarmonics = !this.highHarmonics;
			break;
		case 2:
			break;
		case 3:
			var l0 = command[3];
			var d0 = command[2];
			haxe_Log.trace(this.botIndex,{ fileName : "Game.hx", lineNumber : 171, className : "Game", methodName : "forward", customParams : [currentBot.x,currentBot.y,currentBot.z]});
			currentBot.move(d0,l0);
			haxe_Log.trace(this.botIndex,{ fileName : "Game.hx", lineNumber : 173, className : "Game", methodName : "forward", customParams : [currentBot.x,currentBot.y,currentBot.z]});
			if(currentBot.z > this.size) {
				throw new js__$Boot_HaxeError("over");
			}
			this.energy += 2 * (l0 < 0 ? -l0 : l0);
			break;
		case 4:
			var l1 = command[5];
			var d1 = command[4];
			var l01 = command[3];
			var d01 = command[2];
			haxe_Log.trace(this.botIndex,{ fileName : "Game.hx", lineNumber : 164, className : "Game", methodName : "forward", customParams : [currentBot.x,currentBot.y,currentBot.z]});
			currentBot.move(d01,l01);
			currentBot.move(d1,l1);
			haxe_Log.trace(this.botIndex,{ fileName : "Game.hx", lineNumber : 167, className : "Game", methodName : "forward", customParams : [currentBot.x,currentBot.y,currentBot.z]});
			this.energy += 2 * ((l01 < 0 ? -l01 : l01) + 2 + (l1 < 0 ? -l1 : l1));
			break;
		case 5:
			var m = command[3];
			var nd = command[2];
			var count = 0;
			var target = null;
			var _g = 0;
			while(_g < 20) {
				var i = _g++;
				if(currentBot.seeds[i]) {
					if(count == 0) {
						target = this.bots[i];
						target.x = currentBot.x + ((nd / 9 | 0) - 1);
						target.y = currentBot.y + ((nd / 3 | 0) % 3 - 1);
						target.z = currentBot.z + (nd % 3 - 1);
						target.isNextActive = true;
					} else if(count < m + 1) {
						target.seeds[i] = true;
						currentBot.seeds[i] = false;
					}
					++count;
				}
			}
			this.energy += 24;
			if(target == null) {
				throw new js__$Boot_HaxeError("seedが空のボットが、Fissionしようとしました。");
			}
			break;
		case 6:
			var near = command[2];
			haxe_Log.trace(this.size,{ fileName : "Game.hx", lineNumber : 223, className : "Game", methodName : "forward", customParams : [currentBot.x,(near / 9 | 0) - 1,currentBot.y,(near / 3 | 0) % 3 - 1,currentBot.z,near % 3 - 1]});
			this.currentModel[currentBot.x + ((near / 9 | 0) - 1)][currentBot.y + ((near / 3 | 0) % 3 - 1)][currentBot.z + (near % 3 - 1)] = true;
			this.energy += 12;
			break;
		case 7:
			var targetId = command[2];
			var target1 = this.bots[targetId];
			var _g1 = 0;
			while(_g1 < 20) {
				var i1 = _g1++;
				if(target1.seeds[i1]) {
					target1.seeds[i1] = false;
					currentBot.seeds[i1] = true;
				}
			}
			this.energy -= 24;
			target1.isNextActive = false;
			break;
		case 8:
			break;
		}
		this.botIndex += 1;
		while(this.botIndex < 20) {
			if(this.bots[this.botIndex].isActive) {
				break;
			}
			this.botIndex += 1;
		}
	}
	,revertStep: function(previousActivates) {
		var _g1 = 0;
		var _g = this.bots.length;
		while(_g1 < _g) {
			var i = _g1++;
			var bot = this.bots[i];
			if(bot.isActive) {
				this.energy -= 20;
			}
			bot.isActive = previousActivates[i];
			bot.isNextActive = bot.isActive;
		}
		this.botIndex = 20;
		if(this.highHarmonics) {
			this.energy -= this.size * this.size * this.size * 30;
		} else {
			this.energy -= this.size * this.size * this.size * 3;
		}
	}
	,backward: function(command) {
		this.botIndex -= 1;
		while(this.botIndex >= 0) {
			if(this.bots[this.botIndex].isActive) {
				break;
			}
			this.botIndex -= 1;
		}
		var currentBot = this.bots[this.botIndex];
		switch(command[1]) {
		case 0:
			break;
		case 1:
			this.highHarmonics = !this.highHarmonics;
			break;
		case 2:
			break;
		case 3:
			var z = command[6];
			var y = command[5];
			var x = command[4];
			var l0 = command[3];
			var d0 = command[2];
			currentBot["goto"](x,y,z);
			this.energy -= 2 * (l0 < 0 ? -l0 : l0);
			break;
		case 4:
			var z1 = command[8];
			var y1 = command[7];
			var x1 = command[6];
			var l1 = command[5];
			var d1 = command[4];
			var l01 = command[3];
			var d01 = command[2];
			currentBot["goto"](x1,y1,z1);
			this.energy -= 2 * ((l01 < 0 ? -l01 : l01) + 2 + (l1 < 0 ? -l1 : l1));
			break;
		case 5:
			break;
		case 6:
			var near = command[2];
			this.currentModel[currentBot.x + ((near / 9 | 0) - 1)][currentBot.y + ((near / 3 | 0) % 3 - 1)][currentBot.z + (near % 3 - 1)] = false;
			this.energy -= 12;
			break;
		case 7:
			break;
		case 8:
			break;
		}
	}
	,getNearBot: function(near) {
		var bot = this.bots[this.botIndex];
		var tx = bot.x + ((near / 9 | 0) - 1);
		var ty = bot.y + ((near / 3 | 0) % 3 - 1);
		var tz = bot.z + (near % 3 - 1);
		var _g = 0;
		var _g1 = this.bots;
		while(_g < _g1.length) {
			var target = _g1[_g];
			++_g;
			if(target.isActive && target.x == tx && target.y == ty && target.z == tz) {
				return bot;
			}
		}
		throw new js__$Boot_HaxeError("bot not found at " + tx + ", " + ty + ", " + tz);
	}
	,getCurrentBot: function() {
		return this.bots[this.botIndex];
	}
	,getPreviousActives: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.bots;
		while(_g1 < _g2.length) {
			var bot = _g2[_g1];
			++_g1;
			_g.push(bot.isActive);
		}
		return _g;
	}
	,__class__: Game
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	Main.rootContext = new core_RootContext();
	Main.rootThree = new ThreeView(Main.rootContext);
	Main.rootContext.updateUi = Main.render;
	Main.rootContext.updateGraphic = ($_=Main.rootThree,$bind($_,$_.update));
	Main.update();
	window.document.onkeydown = Main.onKeyDown;
};
Main.update = function() {
	Main.rootContext.onFrame(15);
	haxe_Timer.delay(Main.update,15);
};
Main.render = function() {
	ReactDOM.render(React.createElement(component_root_RootView,{ context : Main.rootContext}),window.document.getElementById("control"));
};
Main.onKeyDown = function(e) {
	if(e.altKey || e.ctrlKey || e.shiftKey) {
		return true;
	}
	var _g = e.keyCode;
	return true;
};
Math.__name__ = true;
var _$Near_Near_$Impl_$ = {};
_$Near_Near_$Impl_$.__name__ = true;
_$Near_Near_$Impl_$.get_x = function(this1) {
	return (this1 / 9 | 0) - 1;
};
_$Near_Near_$Impl_$.get_y = function(this1) {
	return (this1 / 3 | 0) % 3 - 1;
};
_$Near_Near_$Impl_$.get_z = function(this1) {
	return this1 % 3 - 1;
};
_$Near_Near_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s = c + s;
	return s;
};
var ThreeView = function(rootContext) {
	this.rootContext = rootContext;
	var w = 900;
	var h = 750;
	this.scene = new THREE.Scene();
	this.cubes = [];
	this.activeCubes = 0;
	var geometry = new THREE.PlaneGeometry(600,600,1,1);
	var material = new THREE.MeshLambertMaterial({ color : 10031377});
	var plane = new THREE.Mesh(geometry,material);
	material.opacity = 0.3;
	material.transparent = true;
	plane.renderOrder += 1000;
	plane.position.set(0,-300,0);
	plane.rotateOnAxis(new THREE.Vector3(1,0,0),-Math.PI / 2);
	this.scene.add(plane);
	var pointLight = new THREE.PointLight(7829367,1,1000000,2);
	pointLight.position.set(0,0,200);
	this.scene.add(pointLight);
	var pointLight1 = new THREE.PointLight(7829367,1,1000000,2);
	pointLight1.position.set(0,100,400);
	this.scene.add(pointLight1);
	this.camera = new THREE.PerspectiveCamera(70,w / h,1,3000);
	this.camera.position.z = 750;
	this.camera.position.y = 400;
	this.camera.lookAt(new THREE.Vector3(0,0,0));
	this.scene.add(this.camera);
	this.renderer = new THREE.WebGLRenderer();
	this.renderer.setSize(w,h);
	var light = new THREE.AmbientLight(6710886);
	this.scene.add(light);
	window.document.getElementById("three").appendChild(this.renderer.domElement);
	var _g = [];
	var _g1 = 0;
	while(_g1 < 20) {
		var i = _g1++;
		var geometry1 = new THREE.PlaneGeometry(600,600,1,1);
		var material1 = new THREE.MeshLambertMaterial({ color : 15702289});
		var mesh = new THREE.Mesh(geometry1,material1);
		material1.opacity = 0.5;
		material1.transparent = true;
		mesh.visible = false;
		this.scene.add(mesh);
		_g.push(mesh);
	}
	this.bots = _g;
	this.update();
};
ThreeView.__name__ = true;
ThreeView.prototype = {
	update: function() {
		var angle = this.rootContext.cameraAngle * Math.PI * 0.499 + 0.00001;
		this.camera.position.z = Math.sin(angle) * 800;
		this.camera.position.y = Math.cos(angle) * 800;
		this.camera.lookAt(new THREE.Vector3(0,0,0));
		var _g = this.rootContext.game;
		switch(_g[1]) {
		case 0:
			var game = _g[2];
			var count = 0;
			var size = game.size;
			var _g1 = 0;
			while(_g1 < 20) {
				var i = _g1++;
				var logic = game.bots[i];
				var view = this.bots[i];
				if(logic.isActive) {
					var rotatedX;
					var rotatedZ;
					var _g11 = this.rootContext.rot;
					switch(_g11) {
					case 0:
						rotatedX = logic.x;
						rotatedZ = logic.z;
						break;
					case 1:
						rotatedX = size - logic.z - 1;
						rotatedZ = logic.x;
						break;
					case 2:
						rotatedX = size - logic.x - 1;
						rotatedZ = size - logic.z - 1;
						break;
					case 3:
						rotatedX = logic.z;
						rotatedZ = size - logic.x - 1;
						break;
					default:
						throw new js__$Boot_HaxeError("unknown rot");
					}
					view.position.set(rotatedX * 600 / size - 300,logic.y * 600 / size - 300,rotatedZ * 600 / size - 300);
					var scale = 1 / size * 0.5;
					view.scale.set(scale,scale,scale);
					view.visible = true;
				} else {
					view.visible = false;
				}
			}
			var _g12 = 0;
			var _g2 = size;
			while(_g12 < _g2) {
				var z = _g12++;
				var _g3 = 0;
				var _g21 = size;
				while(_g3 < _g21) {
					var y = _g3++;
					var successY = null;
					var successZ = null;
					var failY = null;
					var failZ = null;
					var targetY = null;
					var targetZ = null;
					var _g5 = 0;
					var _g4 = size;
					while(_g5 < _g4) {
						var x = _g5++;
						var targetValue = this.getTarget(game,x,y,z);
						var currentValue = this.getCurrent(game,x,y,z);
						if(targetValue && currentValue) {
							var nextZ = z + 1;
							if(nextZ == size || !this.getCurrent(game,x,y,nextZ) || !this.getTarget(game,x,y,nextZ)) {
								if(successZ == null) {
									var cube = this.getCube(count);
									this.setPlaneZ(cube,x,y,z,size);
									this.setMaterial(cube.material,1136093,0.1);
									successZ = cube;
									++count;
								} else {
									successZ.position.x += 1 / size / 2 * 600;
									successZ.scale.x += 1 / size;
								}
							} else {
								successZ = null;
							}
							var nextY = y + 1;
							if(nextY == size || !this.getCurrent(game,x,nextY,z) || !this.getTarget(game,x,nextY,z)) {
								if(successY == null) {
									var cube1 = this.getCube(count);
									this.setPlaneY(cube1,x,y,z,size);
									this.setMaterial(cube1.material,1136093,0.1);
									successY = cube1;
									++count;
								} else {
									successY.position.x += 1 / size / 2 * 600;
									successY.scale.x += 1 / size;
								}
							} else {
								successY = null;
							}
							failY = null;
							failZ = null;
							targetY = null;
							targetZ = null;
						} else if(!targetValue && currentValue) {
							var nextZ1 = z + 1;
							if(nextZ1 == size || !this.getCurrent(game,x,y,nextZ1) || this.getTarget(game,x,y,nextZ1)) {
								if(failZ == null) {
									var cube2 = this.getCube(count);
									this.setPlaneZ(cube2,x,y,z,size);
									this.setMaterial(cube2.material,14505301,0.1);
									failZ = cube2;
									++count;
								} else {
									failZ.position.x += 1 / size / 2 * 600;
									failZ.scale.x += 1 / size;
								}
							} else {
								failZ = null;
							}
							var nextY1 = y + 1;
							if(nextY1 == size || !this.getCurrent(game,x,nextY1,z) || this.getTarget(game,x,nextY1,z)) {
								if(failY == null) {
									var cube3 = this.getCube(count);
									this.setPlaneY(cube3,x,y,z,size);
									this.setMaterial(cube3.material,14505301,0.1);
									failY = cube3;
									++count;
								} else {
									failY.position.x += 1 / size / 2 * 600;
									failY.scale.x += 1 / size;
								}
							} else {
								failY = null;
							}
							successY = null;
							successZ = null;
							targetY = null;
							targetZ = null;
						} else if(targetValue && !currentValue) {
							var nextZ2 = z + 1;
							if(nextZ2 == size || !this.getTarget(game,x,y,nextZ2) || this.getCurrent(game,x,y,nextZ2)) {
								if(targetZ == null) {
									var cube4 = this.getCube(count);
									this.setPlaneZ(cube4,x,y,z,size);
									this.setMaterial(cube4.material,1170773,0.1);
									targetZ = cube4;
									++count;
								} else {
									targetZ.position.x += 1 / size / 2 * 600;
									targetZ.scale.x += 1 / size;
								}
							} else {
								targetZ = null;
							}
							var nextY2 = y + 1;
							if(nextY2 == size || !this.getTarget(game,x,nextY2,z) || this.getCurrent(game,x,nextY2,z)) {
								if(targetY == null) {
									var cube5 = this.getCube(count);
									this.setPlaneY(cube5,x,y,z,size);
									this.setMaterial(cube5.material,1170773,0.1);
									targetY = cube5;
									++count;
								} else {
									targetY.position.x += 1 / size / 2 * 600;
									targetY.scale.x += 1 / size;
								}
							} else {
								targetY = null;
							}
							failY = null;
							failZ = null;
							successY = null;
							successZ = null;
						} else {
							successY = null;
							successZ = null;
							failY = null;
							failZ = null;
							targetY = null;
							targetZ = null;
						}
					}
				}
			}
			this.setActiveCount(count);
			break;
		case 1:
			this.setActiveCount(0);
			break;
		}
		this.renderer.render(this.scene,this.camera);
	}
	,getCurrent: function(game,x,y,z) {
		var size = game.size;
		var _g = this.rootContext.rot;
		switch(_g) {
		case 0:
			return game.currentModel[x][y][z];
		case 1:
			return game.currentModel[z][y][size - x - 1];
		case 2:
			return game.currentModel[size - x - 1][y][size - z - 1];
		case 3:
			return game.currentModel[size - z - 1][y][x];
		default:
			throw new js__$Boot_HaxeError("unknown rot");
		}
	}
	,getTarget: function(game,x,y,z) {
		var size = game.size;
		var _g = this.rootContext.rot;
		switch(_g) {
		case 0:
			return game.targetModel[x][y][z];
		case 1:
			return game.targetModel[z][y][size - x - 1];
		case 2:
			return game.targetModel[size - x - 1][y][size - z - 1];
		case 3:
			return game.targetModel[size - z - 1][y][x];
		default:
			throw new js__$Boot_HaxeError("unknown rot");
		}
	}
	,getCube: function(index) {
		if(this.cubes.length <= index) {
			var geometry = new THREE.PlaneGeometry(600,600,1,1);
			var material = new THREE.MeshLambertMaterial({ color : 1170773});
			var cube = new THREE.Mesh(geometry,material);
			cube.castShadow = true;
			cube.receiveShadow = true;
			this.cubes.push(cube);
			this.scene.add(cube);
		}
		return this.cubes[index];
	}
	,setPlaneY: function(cube,x,y,z,size) {
		cube.position.set(x * 600 / size - 300,(y + 0.5) * 600 / size - 300,z * 600 / size - 300);
		var scale = 1 / size;
		cube.scale.set(scale * 0.95,scale * 0.95,scale);
		cube.rotation.set(-Math.PI / 2,0,0);
		cube.visible = true;
	}
	,setPlaneZ: function(cube,x,y,z,size) {
		cube.position.set(x * 600 / size - 300,y * 600 / size - 300,(z + 0.5) * 600 / size - 300);
		var scale = 1 / size;
		cube.scale.set(scale * 0.95,scale * 0.95,scale);
		cube.rotation.set(0,0,0);
		cube.visible = true;
	}
	,setMaterial: function(material,color,alpha) {
		material.color.setHex(color);
		material.opacity = alpha;
		material.transparent = true;
	}
	,setActiveCount: function(count) {
		var _g1 = count;
		var _g = this.activeCubes;
		while(_g1 < _g) {
			var i = _g1++;
			this.cubes[i].visible = false;
		}
		this.activeCubes = count;
	}
	,__class__: ThreeView
};
var Tracer = function(game,input) {
	this.position = 0;
	this.index = 0;
	this.game = game;
	game.init();
	this.stepLog = [];
	var currentStep = null;
	while(input.pos < input.totlen) {
		if(game.get_isStepTop()) {
			currentStep = new StepData(game.getPreviousActives());
			this.stepLog.push(currentStep);
			game.startStep();
		}
		var $byte = input.readByte();
		var command;
		if($byte == 255) {
			command = Command.Halt;
		} else if($byte == 254) {
			command = Command.Wait;
		} else if($byte == 253) {
			command = Command.Flip;
		} else if(($byte & 15) == 4) {
			var byte2 = input.readByte();
			var bot = game.getCurrentBot();
			command = Command.SMove(this.getDirection($byte >> 4 & 3),byte2 - 15,bot.x,bot.y,bot.z);
		} else if(($byte & 15) == 12) {
			var byte21 = input.readByte();
			var bot1 = game.getCurrentBot();
			command = Command.LMove(this.getDirection($byte >> 4 & 3),(byte21 & 15) - 5,this.getDirection($byte >> 6 & 3),(byte21 >> 4 & 15) - 5,bot1.x,bot1.y,bot1.z);
		} else if(($byte & 7) == 5) {
			var byte22 = input.readByte();
			command = Command.Fission(this.getNear($byte >> 3),byte22);
		} else if(($byte & 7) == 3) {
			command = Command.Fill(this.getNear($byte >> 3));
		} else if(($byte & 7) == 7) {
			var command1 = game.getNearBot(this.getNear($byte >> 3)).id;
			var this1 = game.getCurrentBot().seeds;
			var length = this1.length;
			var this2 = new Array(length);
			var r = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1,0,r,0,this1.length);
			command = Command.FussionP(command1,r);
		} else if(($byte & 7) == 6) {
			command = Command.FussionS;
		} else {
			throw new js__$Boot_HaxeError("unknown command: " + $byte);
		}
		currentStep.commands.push(command);
		game.forward(command);
	}
	game.init();
};
Tracer.__name__ = true;
Tracer.prototype = {
	getDirection: function(value) {
		if(value == 1) {
			return Direction.X;
		} else if(value == 2) {
			return Direction.Y;
		} else if(value == 3) {
			return Direction.Z;
		} else {
			throw new js__$Boot_HaxeError("unknown direction:" + value);
		}
	}
	,getNear: function(value) {
		return _$Near_Near_$Impl_$._new(value);
	}
	,'goto': function(nextIndex) {
		this.position = nextIndex;
		this._goto(nextIndex);
	}
	,move: function(offset) {
		this.position += offset;
		this._goto(this.position | 0);
	}
	,_goto: function(nextIndex) {
		if(this.stepLog.length < nextIndex) {
			nextIndex = this.stepLog.length;
			this.position = nextIndex;
		} else if(nextIndex < 0) {
			nextIndex = 0;
			this.position = 0;
		}
		while(this.index < nextIndex) {
			var step = this.stepLog[this.index];
			this.game.startStep();
			var _g = 0;
			var _g1 = step.commands;
			while(_g < _g1.length) {
				var command = _g1[_g];
				++_g;
				this.game.forward(command);
			}
			this.index++;
		}
		while(nextIndex < this.index) {
			this.index--;
			var step1 = this.stepLog[this.index];
			var len = step1.commands.length;
			var _g11 = 0;
			var _g2 = len;
			while(_g11 < _g2) {
				var i = _g11++;
				this.game.backward(step1.commands[len - 1 - i]);
			}
			this.game.revertStep(step1.previousActives);
		}
	}
	,__class__: Tracer
};
var StepData = function(previousActives) {
	this.previousActives = previousActives;
	this.commands = [];
};
StepData.__name__ = true;
StepData.prototype = {
	__class__: StepData
};
var component_root_RootView = function(props) {
	React.Component.call(this,props);
};
component_root_RootView.__name__ = true;
component_root_RootView.__super__ = React.Component;
component_root_RootView.prototype = $extend(React.Component.prototype,{
	render: function() {
		var i = 0;
		var _g = this.props.context.tracer;
		var tmp;
		switch(_g[1]) {
		case 0:
			var tracer = _g[2];
			tmp = ["コマンド：",react_ReactStringTools.createElement("input",{ type : "range", value : tracer.index, min : 0, max : tracer.stepLog.length - 1, onChange : $bind(this,this.onRangeChange), style : { width : "800px"}}),tracer.index + "/" + tracer.stepLog.length + "ステップ"];
			break;
		case 1:
			tmp = [];
			break;
		}
		var tmp1 = react_ReactStringTools.createElement("div",{ },tmp);
		var _g1 = this.props.context.tracer;
		var tmp2;
		switch(_g1[1]) {
		case 0:
			var tracer1 = _g1[2];
			tmp2 = [react_ReactStringTools.createElement("button",{ name : "defaultTrace", onClick : $bind(this,this.onPlayClick)},this.props.context.playing ? "停止" : "再生")];
			break;
		case 1:
			tmp2 = [];
			break;
		}
		var tmp3 = react_ReactStringTools.createElement("div",{ },tmp2);
		var _g2 = this.props.context.tracer;
		var tmp4;
		switch(_g2[1]) {
		case 0:
			var tracer2 = _g2[2];
			tmp4 = ["再生速度",react_ReactStringTools.createElement("input",{ type : "range", value : this.props.context.speed, min : -200, max : 200, onChange : $bind(this,this.onSpeedChange), step : 0.01, style : { width : "400px"}}),react_ReactStringTools.createElement("input",{ type : "text", value : this.props.context.speed, onChange : $bind(this,this.onSpeedChange)})];
			break;
		case 1:
			tmp4 = [];
			break;
		}
		var tmp5 = react_ReactStringTools.createElement("div",{ },tmp4);
		var tmp6 = react_ReactStringTools.createElement("hr",{ });
		var _g3 = this.props.context.tracer;
		var tmp7;
		switch(_g3[1]) {
		case 0:
			var tracer3 = _g3[2];
			tmp7 = ["エナジー:" + tracer3.game.energy,react_ReactStringTools.createElement("br",{ }),"ハーモニクス:" + (tracer3.game.highHarmonics ? "High" : "Low"),react_ReactStringTools.createElement("br",{ })];
			break;
		case 1:
			tmp7 = [];
			break;
		}
		var tmp8 = react_ReactStringTools.createElement("div",{ },tmp7);
		var _g4 = this.props.context.tracer;
		var tmp9;
		switch(_g4[1]) {
		case 0:
			var tracer4 = _g4[2];
			var _g41 = [];
			var _g5 = 0;
			var _g6 = tracer4.game.bots;
			while(_g5 < _g6.length) {
				var bot = _g6[_g5];
				++_g5;
				if(bot.isActive) {
					var tmp10 = "ボット" + (bot.id + 1) + ":";
					var _g7 = [];
					var _g9 = 0;
					var _g8 = bot.seeds.length;
					while(_g9 < _g8) {
						var i1 = _g9++;
						if(bot.seeds[i1]) {
							_g7.push(i1);
						}
					}
					_g41.push(tmp10 + _g7.join(",") + "\n");
				}
			}
			tmp9 = _g41;
			break;
		case 1:
			tmp9 = [];
			break;
		}
		var tmp11 = react_ReactStringTools.createElement("pre",{ },tmp9);
		var tmp12 = react_ReactStringTools.createElement("hr",{ });
		var tmp13 = { name : "problem", onChange : $bind(this,this.onProblemSelect), disabled : this.props.context.loading};
		var _g51 = [];
		var _g61 = 0;
		var _g71 = this.props.context.problems;
		while(_g61 < _g71.length) {
			var problem = _g71[_g61];
			++_g61;
			_g51.push(react_ReactStringTools.createElement("option",{ value : problem, selected : this.props.context.name == problem},[problem]));
		}
		var tmp14 = react_ReactStringTools.createElement("select",tmp13,_g51);
		var tmp15 = react_ReactStringTools.createElement("br",{ });
		var tmp16 = react_ReactStringTools.createElement("button",{ name : "defaultTrace", onClick : $bind(this,this.onDefaultTraceClick), disabled : !this.props.context.get_startable()},"デフォルトトレース開始");
		var tmp17 = react_ReactStringTools.createElement("br",{ });
		var tmp18 = react_ReactStringTools.createElement("input",{ type : "text", value : this.props.context.targetDir, onChange : $bind(this,this.onChangeTargetDir)});
		var tmp19 = react_ReactStringTools.createElement("button",{ name : "targetTrace", onClick : $bind(this,this.onTargetTraceClick)},"のディレクトリでトレース開始");
		var tmp20 = react_ReactStringTools.createElement("br",{ });
		var tmp21 = react_ReactStringTools.createElement("input",{ type : "text", value : this.props.context.targetFile, onChange : $bind(this,this.onChangeTargetFile)});
		var tmp22 = react_ReactStringTools.createElement("button",{ name : "targetTrace", onClick : $bind(this,this.onFileTraceClick)},"のファイルでトレース開始");
		var tmp23 = react_ReactStringTools.createElement("br",{ });
		var tmp24 = react_ReactStringTools.createElement("input",{ type : "file", accept : ".nbt", onChange : $bind(this,this.onChangeUpfile)});
		var tmp25 = react_ReactStringTools.createElement("div",{ },[tmp14,tmp15,tmp16,tmp17,tmp18,tmp19,tmp20,tmp21,tmp22,tmp23,tmp24]);
		var tmp26 = react_ReactStringTools.createElement("button",{ name : "targetTrace", onClick : $bind(this,this.onTurnLeftClick)},"<<");
		var tmp27 = "左右回転:" + this.props.context.rot * 90 + "°";
		var tmp28 = react_ReactStringTools.createElement("button",{ name : "targetTrace", onClick : $bind(this,this.onTurnRightClick)},">>");
		var tmp29 = react_ReactStringTools.createElement("div",{ },[tmp26,tmp27,tmp28]);
		var tmp30 = react_ReactStringTools.createElement("input",{ type : "range", value : this.props.context.cameraAngle, min : 0, max : 1, onChange : $bind(this,this.onCameraAngleChange), step : 0.01, style : { width : "400px"}});
		var tmp31 = react_ReactStringTools.createElement("div",{ },["上下回転:",tmp30,this.props.context.cameraAngle]);
		var tmp32 = react_ReactStringTools.createElement("div",{ },this.props.context.errorText);
		var tmp33 = react_ReactStringTools.createElement("div",{ },"version : 13");
		return react_ReactStringTools.createElement("div",{ className : "root"},[tmp1,tmp3,tmp5,tmp6,tmp8,tmp11,tmp12,tmp25,tmp29,tmp31,tmp32,tmp33]);
	}
	,onProblemSelect: function(e) {
		var selectElement = e.target;
		this.props.context.selectProblem(this.props.context.problems[selectElement.selectedIndex]);
		this.props.context.updateHash();
	}
	,onDefaultTraceClick: function(e) {
		this.props.context.startDefaultTrace();
	}
	,onRangeChange: function(e) {
		var range = e.target;
		this.props.context.gotoTrace(parseFloat(range.value) | 0);
	}
	,onPlayClick: function() {
		this.props.context.togglePlaying();
	}
	,onTargetTraceClick: function() {
		this.props.context.startTargetTrace();
	}
	,onFileTraceClick: function() {
		this.props.context.startFileTrace();
	}
	,onChangeTargetDir: function(e) {
		var input = e.target;
		this.props.context.changeTargetDir(input.value);
		this.props.context.updateHash();
	}
	,onChangeTargetFile: function(e) {
		var input = e.target;
		this.props.context.changeTargetFile(input.value);
		this.props.context.updateHash();
	}
	,onSpeedChange: function(e) {
		var range = e.target;
		this.props.context.changeSpeed(range.value);
	}
	,onTurnLeftClick: function(e) {
		this.props.context.turn(1);
	}
	,onTurnRightClick: function(e) {
		this.props.context.turn(3);
	}
	,onCameraAngleChange: function(e) {
		var range = e.target;
		this.props.context.changeCameraAngle(parseFloat(range.value));
	}
	,onChangeUpfile: function(e) {
		var input = e.target;
		this.props.context.changeUpfile(input.files[0]);
	}
	,__class__: component_root_RootView
});
var core_RootContext = function() {
	this.cameraAngle = 0.5;
	this.hash = null;
	this.problemNumber = Std.parseInt(haxe_Resource.getString("size"));
	this.problems = [];
	var _g1 = 1;
	var _g = 187;
	while(_g1 < _g) {
		var i = _g1++;
		this.problems.push("FA" + StringTools.lpad("" + i,"0",3));
	}
	var _g11 = 1;
	var _g2 = 187;
	while(_g11 < _g2) {
		var i1 = _g11++;
		this.problems.push("FD" + StringTools.lpad("" + i1,"0",3));
	}
	var _g12 = 1;
	var _g3 = 116;
	while(_g12 < _g3) {
		var i2 = _g12++;
		this.problems.push("FR" + StringTools.lpad("" + i2,"0",3));
	}
	this.game = haxe_ds_Option.None;
	this.tracer = haxe_ds_Option.None;
	this.loading = false;
	this.playing = true;
	this.speed = "1";
	this.targetDir = "";
	this.targetFile = "";
	this.rot = 0;
	this.name = "";
};
core_RootContext.__name__ = true;
core_RootContext.prototype = {
	get_startable: function() {
		if(!this.loading) {
			var _g = this.game;
			if(_g[1] == 0) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,onFrame: function(ms) {
		var hash = HxOverrides.substr(window.location.hash,1,null);
		var hash1 = HxOverrides.substr(window.location.hash,1,null);
		if(this.hash != hash1) {
			this.hash = hash1;
			try {
				var data = hash1 != "" ? JSON.parse(decodeURIComponent(hash1.split("+").join(" "))) : { };
				if(data.dir == null) {
					data.dir = "submission/nbt";
				}
				if(data.model == null) {
					data.model = "FA001";
				}
				if(data.file == null) {
					data.file = "submission/nbt/" + Std.string(data.model) + ".nbt";
				}
				this.changeTargetDir(data.dir);
				this.changeTargetFile(data.file);
				this.selectProblem(data.model);
				this.updateHash();
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				this.errorText = "エラー: " + Std.string(e);
			}
		}
		if(this.playing) {
			var _g = this.tracer;
			switch(_g[1]) {
			case 0:
				var tracer = _g[2];
				var prevIndex = tracer.index;
				tracer.move(parseFloat(this.speed));
				if(prevIndex != tracer.index) {
					this.updateUi();
					this.updateGraphic();
				}
				break;
			case 1:
				break;
			}
		}
	}
	,selectProblem: function(name) {
		var _gthis = this;
		if(this.name != name) {
			this.name = name;
			this.tracer = haxe_ds_Option.None;
			this.game = haxe_ds_Option.None;
			this.loading = true;
			this.updateUi();
			this.updateGraphic();
			var xhr = new XMLHttpRequest();
			var file = "../../../problemsF/" + name + "_tgt.mdl";
			haxe_Log.trace(file,{ fileName : "RootContext.hx", lineNumber : 126, className : "core.RootContext", methodName : "selectProblem"});
			xhr.open("GET",file,true);
			xhr.responseType = "arraybuffer";
			xhr.onload = function(e) {
				if(xhr.status == 200) {
					var arrayBuffer = xhr.response;
					var tmp = haxe_ds_Option.Some(new haxe_io_BytesInput(haxe_io_Bytes.ofData(arrayBuffer)));
					_gthis.loadSourceProblem(name,tmp);
				} else {
					_gthis.loadSourceProblem(name,haxe_ds_Option.None);
				}
			};
			xhr.onerror = function(e1) {
			};
			xhr.send();
		}
	}
	,loadSourceProblem: function(name,target) {
		var _gthis = this;
		var xhr = new XMLHttpRequest();
		var file = "../../../problemsF/" + name + "_src.mdl";
		haxe_Log.trace(file,{ fileName : "RootContext.hx", lineNumber : 150, className : "core.RootContext", methodName : "loadSourceProblem"});
		xhr.open("GET",file,true);
		xhr.responseType = "arraybuffer";
		xhr.onload = function(e) {
			if(xhr.status == 200) {
				var arrayBuffer = xhr.response;
				var tmp = haxe_ds_Option.Some(new haxe_io_BytesInput(haxe_io_Bytes.ofData(arrayBuffer)));
				_gthis.loadedProbrem(name,target,tmp);
			} else {
				_gthis.loadedProbrem(name,target,haxe_ds_Option.None);
			}
		};
		xhr.onerror = function(e1) {
		};
		xhr.send();
	}
	,startDefaultTrace: function() {
		this.startTrace("../../../dfltTracesF/" + this.name + ".nbt");
	}
	,startTargetTrace: function() {
		this.startTrace("../../../" + this.targetDir + "/" + this.name + ".nbt");
	}
	,startFileTrace: function() {
		this.startTrace("../../../" + this.targetFile);
	}
	,changeTargetDir: function(targetDir) {
		if(this.targetDir != targetDir) {
			this.targetDir = targetDir;
			this.updateUi();
		}
	}
	,changeTargetFile: function(targetFile) {
		if(this.targetFile != targetFile) {
			this.targetFile = targetFile;
			this.updateUi();
		}
	}
	,changeUpfile: function(file) {
		var _gthis = this;
		var reader = new FileReader();
		this.loading = true;
		reader.onload = function(e) {
			var arrayBuffer = reader.result;
			var tmp = haxe_io_Bytes.ofData(arrayBuffer);
			_gthis.loadedTrace(new haxe_io_BytesInput(tmp));
		};
		reader.onerror = function(e1) {
			_gthis.loading = false;
			_gthis.errorText = "エラー: ファイル読み込みエラー:" + Std.string(file);
			_gthis.updateUi();
			_gthis.updateGraphic();
		};
		reader.readAsArrayBuffer(file);
	}
	,startTrace: function(file) {
		var _gthis = this;
		var xhr = new XMLHttpRequest();
		this.tracer = haxe_ds_Option.None;
		this.loading = true;
		this.updateUi();
		this.updateGraphic();
		xhr.open("GET",file,true);
		xhr.responseType = "arraybuffer";
		xhr.onload = function(e) {
			var arrayBuffer = xhr.response;
			var tmp = haxe_io_Bytes.ofData(arrayBuffer);
			_gthis.loadedTrace(new haxe_io_BytesInput(tmp));
		};
		xhr.onerror = function(e1) {
			_gthis.loading = false;
			_gthis.errorText = "エラー: ファイル読み込みエラー:" + file;
			_gthis.updateUi();
			_gthis.updateGraphic();
		};
		xhr.send();
	}
	,loadedProbrem: function(name,target,source) {
		this.game = haxe_ds_Option.Some(new Game(source,target));
		this.loading = false;
		this.updateUi();
		this.updateGraphic();
	}
	,loadedTrace: function(byteInput) {
		this.loading = false;
		var _g = this.game;
		switch(_g[1]) {
		case 0:
			var game = _g[2];
			this.tracer = haxe_ds_Option.Some(new Tracer(game,byteInput));
			break;
		case 1:
			break;
		}
		this.updateUi();
		this.updateGraphic();
	}
	,gotoTrace: function($int) {
		var _g = this.tracer;
		switch(_g[1]) {
		case 0:
			var tracer = _g[2];
			tracer["goto"]($int);
			break;
		case 1:
			break;
		}
		this.updateUi();
		this.updateGraphic();
	}
	,togglePlaying: function() {
		this.playing = !this.playing;
		this.updateUi();
		this.updateGraphic();
	}
	,changeSpeed: function(speed) {
		this.speed = speed;
		this.updateUi();
		this.updateGraphic();
	}
	,turn: function(i) {
		this.rot = (this.rot + i) % 4;
		this.updateUi();
		this.updateGraphic();
	}
	,changeCameraAngle: function(cameraAngle) {
		this.cameraAngle = cameraAngle;
		this.updateUi();
		this.updateGraphic();
	}
	,updateHash: function() {
	}
	,__class__: core_RootContext
};
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Resource = function() { };
haxe_Resource.__name__ = true;
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_Option = { __ename__ : true, __constructs__ : ["Some","None"] };
haxe_ds_Option.Some = function(v) { var $x = ["Some",0,v]; $x.__enum__ = haxe_ds_Option; $x.toString = $estr; return $x; };
haxe_ds_Option.None = ["None",1];
haxe_ds_Option.None.toString = $estr;
haxe_ds_Option.None.__enum__ = haxe_ds_Option;
var haxe_ds__$Vector_Vector_$Impl_$ = {};
haxe_ds__$Vector_Vector_$Impl_$.__name__ = true;
haxe_ds__$Vector_Vector_$Impl_$.blit = function(src,srcPos,dest,destPos,len) {
	if(src == dest) {
		if(srcPos < destPos) {
			var i = srcPos + len;
			var j = destPos + len;
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var k = _g1++;
				--i;
				--j;
				src[j] = src[i];
			}
		} else if(srcPos > destPos) {
			var i1 = srcPos;
			var j1 = destPos;
			var _g11 = 0;
			var _g2 = len;
			while(_g11 < _g2) {
				var k1 = _g11++;
				src[j1] = src[i1];
				++i1;
				++j1;
			}
		}
	} else {
		var _g12 = 0;
		var _g3 = len;
		while(_g12 < _g3) {
			var i2 = _g12++;
			dest[destPos + i2] = src[srcPos + i2];
		}
	}
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
haxe_io_BytesInput.__name__ = true;
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var js_three__$ArrayLike_ArrayLike_$Impl_$ = {};
js_three__$ArrayLike_ArrayLike_$Impl_$.__name__ = true;
js_three__$ArrayLike_ArrayLike_$Impl_$.get = function(this1,key) {
	return this1[key];
};
js_three__$ArrayLike_ArrayLike_$Impl_$.arrayWrite = function(this1,k,v) {
	this1[k] = v;
	return v;
};
var react__$ReactRef_ReactRef_$Impl_$ = {};
react__$ReactRef_ReactRef_$Impl_$.__name__ = true;
react__$ReactRef_ReactRef_$Impl_$.get_current = function(this1) {
	return this1.current;
};
var react_ReactTools = function() { };
react_ReactTools.__name__ = true;
react_ReactTools.createElement = function(type,attrs) {
	return React.createElement(type,attrs);
};
var react_ReactStringTools = function() { };
react_ReactStringTools.__name__ = true;
react_ReactStringTools.createElement = function(type,attrs,children0) {
	return React.createElement(type,attrs,children0);
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
haxe_Resource.content = [];
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
component_root_RootView.displayName = "RootView";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=visualizer.js.map