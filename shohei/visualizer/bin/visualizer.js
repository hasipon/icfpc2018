// Generated by Haxe 3.4.5
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var BackwardCommand = { __ename__ : true, __constructs__ : ["Flip","Empty","Halt","LMove","SMove","Fission","Fusion","Fill","SVoid","GFill","GVoid","ReservFusionP","ReservFusionS"] };
BackwardCommand.Flip = ["Flip",0];
BackwardCommand.Flip.toString = $estr;
BackwardCommand.Flip.__enum__ = BackwardCommand;
BackwardCommand.Empty = ["Empty",1];
BackwardCommand.Empty.toString = $estr;
BackwardCommand.Empty.__enum__ = BackwardCommand;
BackwardCommand.Halt = ["Halt",2];
BackwardCommand.Halt.toString = $estr;
BackwardCommand.Halt.__enum__ = BackwardCommand;
BackwardCommand.LMove = function(position) { var $x = ["LMove",3,position]; $x.__enum__ = BackwardCommand; $x.toString = $estr; return $x; };
BackwardCommand.SMove = function(position) { var $x = ["SMove",4,position]; $x.__enum__ = BackwardCommand; $x.toString = $estr; return $x; };
BackwardCommand.Fission = function(target) { var $x = ["Fission",5,target]; $x.__enum__ = BackwardCommand; $x.toString = $estr; return $x; };
BackwardCommand.Fusion = function(primary,secondary,primarySeeds,secondarySeeds) { var $x = ["Fusion",6,primary,secondary,primarySeeds,secondarySeeds]; $x.__enum__ = BackwardCommand; $x.toString = $estr; return $x; };
BackwardCommand.Fill = function(near) { var $x = ["Fill",7,near]; $x.__enum__ = BackwardCommand; $x.toString = $estr; return $x; };
BackwardCommand.SVoid = function(near) { var $x = ["SVoid",8,near]; $x.__enum__ = BackwardCommand; $x.toString = $estr; return $x; };
BackwardCommand.GFill = function(top,history) { var $x = ["GFill",9,top,history]; $x.__enum__ = BackwardCommand; $x.toString = $estr; return $x; };
BackwardCommand.GVoid = function(top,history) { var $x = ["GVoid",10,top,history]; $x.__enum__ = BackwardCommand; $x.toString = $estr; return $x; };
BackwardCommand.ReservFusionP = ["ReservFusionP",11];
BackwardCommand.ReservFusionP.toString = $estr;
BackwardCommand.ReservFusionP.__enum__ = BackwardCommand;
BackwardCommand.ReservFusionS = ["ReservFusionS",12];
BackwardCommand.ReservFusionS.toString = $estr;
BackwardCommand.ReservFusionS.__enum__ = BackwardCommand;
var Bot = function(id,x,y,z) {
	this.id = _$BotId_BotId_$Impl_$._new(id);
	this.position = _$Position_Position_$Impl_$.fromXyz(x,y,z);
	this.isActive = false;
	this.isNextActive = false;
};
Bot.__name__ = true;
Bot.prototype = {
	move: function(direction,length) {
		this.position = _$Position_Position_$Impl_$.move(this.position,direction,length);
	}
	,forward: function() {
		this.isActive = this.isNextActive;
	}
	,__class__: Bot
};
var _$BotId_BotId_$Impl_$ = {};
_$BotId_BotId_$Impl_$.__name__ = true;
_$BotId_BotId_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
var _$Command_Command_$Impl_$ = {};
_$Command_Command_$Impl_$.__name__ = true;
_$Command_Command_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
_$Command_Command_$Impl_$.read = function(input) {
	var value = input.readByte();
	var kind = _$CommandKind_CommandKind_$Impl_$._new(value);
	var _g1 = 1;
	var _g = _$CommandKind_CommandKind_$Impl_$.size(kind);
	while(_g1 < _g) {
		var i = _g1++;
		value |= input.readByte() << 8 * i;
	}
	return _$Command_Command_$Impl_$._new(value);
};
_$Command_Command_$Impl_$.write = function(this1,bytesOutput) {
	var _g1 = 0;
	var _g = _$CommandKind_CommandKind_$Impl_$.size(_$Command_Command_$Impl_$.kind(this1));
	while(_g1 < _g) {
		var i = _g1++;
		bytesOutput.writeByte(this1 >> 8 * i);
	}
};
_$Command_Command_$Impl_$.kind = function(this1) {
	return _$CommandKind_CommandKind_$Impl_$._new(this1 & 255);
};
_$Command_Command_$Impl_$.nd = function(this1) {
	return _$Near_Near_$Impl_$._new(this1 >> 3 & 31);
};
_$Command_Command_$Impl_$.m = function(this1) {
	return this1 >> 8 & 255;
};
_$Command_Command_$Impl_$.direction1 = function(this1) {
	return _$Direction_Direction_$Impl_$._new(this1 >> 4 & 3);
};
_$Command_Command_$Impl_$.direction2 = function(this1) {
	return _$Direction_Direction_$Impl_$._new(this1 >> 6 & 3);
};
_$Command_Command_$Impl_$.short1 = function(this1) {
	var value = (this1 >> 8 & 15) - 5;
	var tmp = 5 < value;
	return value;
};
_$Command_Command_$Impl_$.short2 = function(this1) {
	var value = (this1 >> 12 & 15) - 5;
	var tmp = 5 < value;
	return value;
};
_$Command_Command_$Impl_$["long"] = function(this1) {
	var value = (this1 >> 8 & 31) - 15;
	var tmp = 8 < value;
	return value;
};
_$Command_Command_$Impl_$.far = function(this1) {
	return _$Far_Far_$Impl_$._new(this1 >> 8 & 16777215);
};
_$Command_Command_$Impl_$._wait = function() {
	return _$Command_Command_$Impl_$._new(254);
};
_$Command_Command_$Impl_$.halt = function() {
	return _$Command_Command_$Impl_$._new(255);
};
_$Command_Command_$Impl_$.flip = function() {
	return _$Command_Command_$Impl_$._new(253);
};
_$Command_Command_$Impl_$.sMove = function(dir,$long) {
	return _$Command_Command_$Impl_$._new($long + 15 << 8 | _$Direction_Direction_$Impl_$.toByte(dir) << 4 | 4);
};
_$Command_Command_$Impl_$.lMove = function(dir0,short0,dir1,short1) {
	return _$Command_Command_$Impl_$._new(short1 + 5 << 12 | short0 + 5 << 8 | _$Direction_Direction_$Impl_$.toByte(dir1) << 6 | _$Direction_Direction_$Impl_$.toByte(dir0) << 4 | 12);
};
_$Command_Command_$Impl_$.fission = function(nd,m) {
	return _$Command_Command_$Impl_$._new(m << 8 | _$Near_Near_$Impl_$.toByte(nd) << 3 | 5);
};
_$Command_Command_$Impl_$.fusionP = function(nd) {
	return _$Command_Command_$Impl_$._new(_$Near_Near_$Impl_$.toByte(nd) << 3 | 7);
};
_$Command_Command_$Impl_$.fusionS = function(nd) {
	return _$Command_Command_$Impl_$._new(_$Near_Near_$Impl_$.toByte(nd) << 3 | 6);
};
_$Command_Command_$Impl_$["void"] = function(nd) {
	return _$Command_Command_$Impl_$._new(_$Near_Near_$Impl_$.toByte(nd) << 3 | 2);
};
_$Command_Command_$Impl_$.fill = function(nd) {
	return _$Command_Command_$Impl_$._new(_$Near_Near_$Impl_$.toByte(nd) << 3 | 3);
};
_$Command_Command_$Impl_$.gVoid = function(nd,far) {
	return _$Command_Command_$Impl_$._new(_$Far_Far_$Impl_$.toByte(far) << 8 | _$Near_Near_$Impl_$.toByte(nd) << 3 | 0);
};
_$Command_Command_$Impl_$.gFill = function(nd,far) {
	return _$Command_Command_$Impl_$._new(_$Far_Far_$Impl_$.toByte(far) << 8 | _$Near_Near_$Impl_$.toByte(nd) << 3 | 1);
};
var _$CommandKind_CommandKind_$Impl_$ = {};
_$CommandKind_CommandKind_$Impl_$.__name__ = true;
_$CommandKind_CommandKind_$Impl_$._new = function($byte) {
	var this1;
	var value;
	if($byte == 255) {
		value = 0;
	} else if($byte == 254) {
		value = 2;
	} else if($byte == 253) {
		value = 1;
	} else if(($byte & 15) == 4) {
		value = 3;
	} else if(($byte & 15) == 12) {
		value = 4;
	} else if(($byte & 7) == 5) {
		value = 5;
	} else if(($byte & 7) == 3) {
		value = 6;
	} else if(($byte & 7) == 7) {
		value = 8;
	} else if(($byte & 7) == 6) {
		value = 9;
	} else if(($byte & 7) == 2) {
		value = 7;
	} else if(($byte & 7) == 1) {
		value = 10;
	} else if(($byte & 7) == 0) {
		value = 11;
	} else {
		throw new js__$Boot_HaxeError("unknown command: " + $byte);
	}
	this1 = value;
	return this1;
};
_$CommandKind_CommandKind_$Impl_$.size = function(this1) {
	switch(this1) {
	case 0:
		return 1;
	case 1:
		return 1;
	case 2:
		return 1;
	case 3:
		return 2;
	case 4:
		return 2;
	case 5:
		return 2;
	case 6:
		return 1;
	case 7:
		return 1;
	case 8:
		return 1;
	case 9:
		return 1;
	case 10:
		return 4;
	case 11:
		return 4;
	default:
		return 1;
	}
};
_$CommandKind_CommandKind_$Impl_$.toByte = function(this1) {
	return this1;
};
var _$Direction_Direction_$Impl_$ = {};
_$Direction_Direction_$Impl_$.__name__ = true;
_$Direction_Direction_$Impl_$._new = function(value) {
	var this1 = value;
	if(value == 0) {
		throw new js__$Boot_HaxeError(0 + "は方向として正しくありません。");
	}
	return this1;
};
_$Direction_Direction_$Impl_$.toByte = function(this1) {
	return this1;
};
var _$Far_Far_$Impl_$ = {};
_$Far_Far_$Impl_$.__name__ = true;
_$Far_Far_$Impl_$._new = function(value) {
	var this1 = value;
	if(30 < (this1 & 255) - 30 || 30 < (this1 >> 8 & 255) - 30 || 30 < (this1 >> 16 & 255) - 30) {
		throw new js__$Boot_HaxeError("大きすぎるFar" + ((this1 & 255) - 30) + "," + ((this1 >> 8 & 255) - 30) + "," + ((this1 >> 16 & 255) - 30));
	}
	return this1;
};
_$Far_Far_$Impl_$.fromXyz = function(x,y,z) {
	return _$Far_Far_$Impl_$._new(x + 30 & 255 | (y + 30 & 255) << 8 | (z + 30 & 255) << 16);
};
_$Far_Far_$Impl_$.get_x = function(this1) {
	return (this1 & 255) - 30;
};
_$Far_Far_$Impl_$.get_y = function(this1) {
	return (this1 >> 8 & 255) - 30;
};
_$Far_Far_$Impl_$.get_z = function(this1) {
	return (this1 >> 16 & 255) - 30;
};
_$Far_Far_$Impl_$.isPositive = function(this1) {
	if((this1 & 255) - 30 >= 0 && (this1 >> 8 & 255) - 30 >= 0) {
		return (this1 >> 16 & 255) - 30 >= 0;
	} else {
		return false;
	}
};
_$Far_Far_$Impl_$.toByte = function(this1) {
	return this1;
};
_$Far_Far_$Impl_$.toPositive = function(this1) {
	return _$Far_Far_$Impl_$.fromXyz((this1 & 255) - 30 < 0 ? -((this1 & 255) - 30) : (this1 & 255) - 30,(this1 >> 8 & 255) - 30 < 0 ? -((this1 >> 8 & 255) - 30) : (this1 >> 8 & 255) - 30,(this1 >> 16 & 255) - 30 < 0 ? -((this1 >> 16 & 255) - 30) : (this1 >> 16 & 255) - 30);
};
_$Far_Far_$Impl_$.toFirst = function(this1) {
	return _$Far_Far_$Impl_$.fromXyz((this1 & 255) - 30 < 0 ? (this1 & 255) - 30 : 0,(this1 >> 8 & 255) - 30 < 0 ? (this1 >> 8 & 255) - 30 : 0,(this1 >> 16 & 255) - 30 < 0 ? (this1 >> 16 & 255) - 30 : 0);
};
_$Far_Far_$Impl_$.getCorner = function(this1) {
	var dim = 0;
	if((this1 & 255) - 30 != 0) {
		++dim;
	}
	if((this1 >> 8 & 255) - 30 != 0) {
		++dim;
	}
	if((this1 >> 16 & 255) - 30 != 0) {
		++dim;
	}
	switch(dim) {
	case 1:
		return 2;
	case 2:
		return 4;
	case 3:
		return 8;
	default:
		return 1;
	}
};
var GZip = function() { };
GZip.__name__ = true;
GZip.unzip = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	input.set_bigEndian(false);
	input.readByte();
	input.readByte();
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(input.read(input.totlen - input.pos - 4)));
};
GZip.zip = function(bytes) {
	var output = new haxe_io_BytesOutput();
	output.writeByte(31);
	output.writeByte(139);
	output.write(haxe_zip_Compress.run(bytes,1));
	return output.getBytes();
};
var Game = function(sourceModelInput,targetModelInput) {
	this.targetModelInput = targetModelInput;
	this.sourceModelInput = sourceModelInput;
	this.init();
};
Game.__name__ = true;
Game.createVector3D_Bool = function(size,defaultValue) {
	var this1 = new Array(size);
	var result = this1;
	var _g1 = 0;
	var _g = size;
	while(_g1 < _g) {
		var i = _g1++;
		var this2 = new Array(size);
		result[i] = this2;
		var _g3 = 0;
		var _g2 = size;
		while(_g3 < _g2) {
			var j = _g3++;
			var this3 = new Array(size);
			result[i][j] = this3;
			var _g5 = 0;
			var _g4 = size;
			while(_g5 < _g4) {
				var k = _g5++;
				result[i][j][k] = defaultValue;
			}
		}
	}
	return result;
};
Game.compare = function(a,b) {
	if(a < b) {
		return -1;
	} else if(a > b) {
		return 1;
	}
	return 0;
};
Game.abs = function(value) {
	if(value < 0) {
		return -value;
	} else {
		return value;
	}
};
Game.prototype = {
	get_isStepTop: function() {
		return Bot.MAX <= this.botIndex;
	}
	,getActiveBotsCount: function() {
		var result = 0;
		var _g = 0;
		var _g1 = this.bots;
		while(_g < _g1.length) {
			var bot = _g1[_g];
			++_g;
			if(bot.isActive) {
				++result;
			}
		}
		return result;
	}
	,init: function() {
		var _g = this.targetModelInput;
		switch(_g[1]) {
		case 0:
			var targetModelInput = _g[2];
			targetModelInput.set_position(0);
			this.size = targetModelInput.readByte();
			break;
		case 1:
			break;
		}
		var _g1 = this.sourceModelInput;
		switch(_g1[1]) {
		case 0:
			var sourceModelInput = _g1[2];
			sourceModelInput.set_position(0);
			this.size = sourceModelInput.readByte();
			break;
		case 1:
			break;
		}
		this.smallUnionFind = new UnionFind(27);
		this.highHarmonics = false;
		var _g2 = [];
		var _g4 = 0;
		var _g3 = Bot.MAX;
		while(_g4 < _g3) {
			var i = _g4++;
			_g2.push(new Bot(i,0,0,0));
		}
		this.bots = _g2;
		this.bots[0].isActive = true;
		this.bots[0].isNextActive = true;
		var _g31 = [];
		var _g5 = 1;
		var _g41 = Bot.MAX;
		while(_g5 < _g41) {
			var i1 = _g5++;
			_g31.push(_$BotId_BotId_$Impl_$._new(i1));
		}
		this.bots[0].seeds = _g31;
		this.reservedFusionP = new haxe_ds_IntMap();
		this.reservedFusionS = new haxe_ds_IntMap();
		this.energy = 0;
		this.step = 0;
		this.botIndex = Bot.MAX;
		this.currentModel = Game.createVector3D_Bool(this.size,false);
		this.targetModel = Game.createVector3D_Bool(this.size,false);
		this.currentMinX = this.size;
		this.currentMinY = this.size;
		this.currentMinZ = this.size;
		this.currentMaxX = 0;
		this.currentMaxY = 0;
		this.currentMaxZ = 0;
		this.targetMinX = this.size;
		this.targetMinY = this.size;
		this.targetMinZ = this.size;
		this.targetMaxX = 0;
		this.targetMaxY = 0;
		this.targetMaxZ = 0;
		var _g42 = this.sourceModelInput;
		switch(_g42[1]) {
		case 0:
			var sourceModelInput1 = _g42[2];
			var restCount = 0;
			var restValue = 0;
			var _g51 = 0;
			var _g43 = this.size;
			while(_g51 < _g43) {
				var x = _g51++;
				var _g7 = 0;
				var _g6 = this.size;
				while(_g7 < _g6) {
					var y = _g7++;
					var _g9 = 0;
					var _g8 = this.size;
					while(_g9 < _g8) {
						var z = _g9++;
						if(restCount == 0) {
							restValue = sourceModelInput1.readByte();
							restCount = 8;
						}
						--restCount;
						var fill = (restValue & 1 << 7 - restCount) != 0;
						this.currentModel[x][y][z] = fill;
						if(fill) {
							if(this.currentMinX > x) {
								this.currentMinX = x;
							}
							if(this.currentMinY > y) {
								this.currentMinY = y;
							}
							if(this.currentMinZ > z) {
								this.currentMinZ = z;
							}
							if(this.currentMaxX < x) {
								this.currentMaxX = x;
							}
							if(this.currentMaxY < y) {
								this.currentMaxY = y;
							}
							if(this.currentMaxZ < z) {
								this.currentMaxZ = z;
							}
						}
					}
				}
			}
			break;
		case 1:
			break;
		}
		var _g52 = this.targetModelInput;
		switch(_g52[1]) {
		case 0:
			var targetModelInput1 = _g52[2];
			var restCount1 = 0;
			var restValue1 = 0;
			var _g61 = 0;
			var _g53 = this.size;
			while(_g61 < _g53) {
				var x1 = _g61++;
				var _g81 = 0;
				var _g71 = this.size;
				while(_g81 < _g71) {
					var y1 = _g81++;
					var _g10 = 0;
					var _g91 = this.size;
					while(_g10 < _g91) {
						var z1 = _g10++;
						if(restCount1 == 0) {
							restValue1 = targetModelInput1.readByte();
							restCount1 = 8;
						}
						--restCount1;
						var fill1 = (restValue1 & 1 << 7 - restCount1) != 0;
						this.targetModel[x1][y1][z1] = fill1;
						if(fill1) {
							if(this.targetMinX > x1) {
								this.targetMinX = x1;
							}
							if(this.targetMinY > y1) {
								this.targetMinY = y1;
							}
							if(this.targetMinZ > z1) {
								this.targetMinZ = z1;
							}
							if(this.targetMaxY < x1) {
								this.targetMaxX = x1;
							}
							if(this.targetMaxX < y1) {
								this.targetMaxY = y1;
							}
							if(this.targetMaxZ < z1) {
								this.targetMaxZ = z1;
							}
						}
					}
				}
			}
			break;
		case 1:
			break;
		}
		this.boundMinX = this.targetMinX < this.currentMinX ? this.targetMinX : this.currentMinX;
		this.boundMinY = 0;
		this.boundMinZ = this.targetMinZ < this.currentMinZ ? this.targetMinZ : this.currentMinZ;
		this.boundMaxX = this.targetMaxX > this.currentMaxX ? this.targetMaxX : this.currentMaxX;
		this.boundMaxY = this.targetMaxY > this.currentMaxY ? this.targetMaxY : this.currentMaxY;
		this.boundMaxZ = this.targetMaxZ > this.currentMaxZ ? this.targetMaxZ : this.currentMaxZ;
		this.halted = false;
		this.gFillLog = new haxe_ds_IntMap();
		this.gVoidLog = new haxe_ds_IntMap();
		this.voidLogs = [];
		this.fillLogs = [];
		this.shouldResetUnionFind = true;
	}
	,startStep: function() {
		if(this.reservedFusionS.iterator().hasNext()) {
			throw new js__$Boot_HaxeError("未処理のFusionSがあります。");
		}
		if(this.reservedFusionP.iterator().hasNext()) {
			throw new js__$Boot_HaxeError("未処理のFusionPがあります。");
		}
		var key = this.gFillLog.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var log = this.gFillLog.get(key1);
			var corner = _$Far_Far_$Impl_$.getCorner(log.far);
			if(corner != log.count) {
				throw new js__$Boot_HaxeError("GFillの角とボットの数が合いません。" + log.count + "/" + corner);
			}
			if(corner == 1) {
				throw new js__$Boot_HaxeError("1点のGFillはできません");
			}
			this.gFillLog.remove(key1);
		}
		var key2 = this.gVoidLog.keys();
		while(key2.hasNext()) {
			var key3 = key2.next();
			var log1 = this.gVoidLog.get(key3);
			var corner1 = _$Far_Far_$Impl_$.getCorner(log1.far);
			if(corner1 != log1.count) {
				throw new js__$Boot_HaxeError("GVoidの角とボットの数が合いません。" + log1.count + "/" + corner1);
			}
			if(corner1 == 1) {
				throw new js__$Boot_HaxeError("1点のGVoidはできません");
			}
			this.gVoidLog.remove(key3);
		}
		var sizeX = this.boundMaxX - this.boundMinX + 1;
		var sizeY = this.boundMaxY - this.boundMinY + 1 + 1;
		var sizeZ = this.boundMaxZ - this.boundMinZ + 1;
		var _g1 = 0;
		var _g = this.voidLogs.length;
		while(_g1 < _g) {
			var i = _g1++;
			var pos = this.voidLogs.pop();
			if(!this.shouldResetUnionFind) {
				this.smallUnionFind.reset(27);
				var _g2 = 0;
				while(_g2 < 2) {
					var dx = _g2++;
					var _g3 = 0;
					while(_g3 < 2) {
						var dy = _g3++;
						var _g4 = 0;
						while(_g4 < 2) {
							var dz = _g4++;
							var pos2 = _$Position_Position_$Impl_$.fromXyz((pos & 255) + dx - 1,(pos >> 8 & 255) + dy - 1,(pos >> 16 & 255) + dz - 1);
							if(0 < (pos & 255) + dx - 1 && 0 < (pos >> 8 & 255) + dy - 1 && 0 < (pos >> 16 & 255) + dz - 1 && this.isInBound(pos2) && this.currentModel[pos2 & 255][pos2 >> 8 & 255][pos2 >> 16 & 255]) {
								if(0 <= dx - 1 && this.isInBound(_$Position_Position_$Impl_$.fromXyz((pos2 & 255) - 1,pos2 >> 8 & 255,pos2 >> 16 & 255)) && this.currentModel[(pos2 & 255) - 1][pos2 >> 8 & 255][pos2 >> 16 & 255]) {
									var _this = this.smallUnionFind;
									var x = dx * 9 + dy * 3 + dz;
									var y = (dx - 1) * 9 + dy * 3 + dz;
									if(_this.data[x] < 0) {
										x = x;
									} else {
										x = _this.data[x] = _this.root(_this.data[x]);
									}
									if(_this.data[y] < 0) {
										y = y;
									} else {
										y = _this.data[y] = _this.root(_this.data[y]);
									}
									if(x != y) {
										if(_this.data[y] < _this.data[x]) {
											var tmp = x;
											x = y;
											y = tmp;
										}
										var _g5 = x;
										var _g11 = _this.data;
										_g11[_g5] = _g11[_g5] + _this.data[y];
										_this.data[y] = x;
									}
								}
								if(0 <= dy - 1 && this.isInBound(_$Position_Position_$Impl_$.fromXyz(pos2 & 255,(pos2 >> 8 & 255) - 1,pos2 >> 16 & 255)) && this.currentModel[pos2 & 255][(pos2 >> 8 & 255) - 1][pos2 >> 16 & 255]) {
									var _this1 = this.smallUnionFind;
									var x1 = dx * 9 + dy * 3 + dz;
									var y1 = dx * 9 + (dy - 1) * 3 + dz;
									if(_this1.data[x1] < 0) {
										x1 = x1;
									} else {
										x1 = _this1.data[x1] = _this1.root(_this1.data[x1]);
									}
									if(_this1.data[y1] < 0) {
										y1 = y1;
									} else {
										y1 = _this1.data[y1] = _this1.root(_this1.data[y1]);
									}
									if(x1 != y1) {
										if(_this1.data[y1] < _this1.data[x1]) {
											var tmp1 = x1;
											x1 = y1;
											y1 = tmp1;
										}
										var _g6 = x1;
										var _g12 = _this1.data;
										_g12[_g6] = _g12[_g6] + _this1.data[y1];
										_this1.data[y1] = x1;
									}
								}
								if(0 <= dz - 1 && this.isInBound(_$Position_Position_$Impl_$.fromXyz(pos2 & 255,pos2 >> 8 & 255,(pos2 >> 16 & 255) - 1)) && this.currentModel[pos2 & 255][pos2 >> 8 & 255][(pos2 >> 16 & 255) - 1]) {
									var _this2 = this.smallUnionFind;
									var x2 = dx * 9 + dy * 3 + dz;
									var y2 = dx * 9 + dy * 3 + (dz - 1);
									if(_this2.data[x2] < 0) {
										x2 = x2;
									} else {
										x2 = _this2.data[x2] = _this2.root(_this2.data[x2]);
									}
									if(_this2.data[y2] < 0) {
										y2 = y2;
									} else {
										y2 = _this2.data[y2] = _this2.root(_this2.data[y2]);
									}
									if(x2 != y2) {
										if(_this2.data[y2] < _this2.data[x2]) {
											var tmp2 = x2;
											x2 = y2;
											y2 = tmp2;
										}
										var _g7 = x2;
										var _g13 = _this2.data;
										_g13[_g7] = _g13[_g7] + _this2.data[y2];
										_this2.data[y2] = x2;
									}
								}
							}
						}
					}
				}
				if(!this.smallUnionFind.isUnion()) {
					this.shouldResetUnionFind = true;
				}
			}
		}
		var _g14 = 0;
		var _g8 = this.fillLogs.length;
		while(_g14 < _g8) {
			var i1 = _g14++;
			var pos1 = this.fillLogs[i1];
			var dx1 = (pos1 & 255) - this.boundMinX;
			var dy1 = (pos1 >> 8 & 255) - this.boundMinY + 1;
			var dz1 = (pos1 >> 16 & 255) - this.boundMinZ;
			this.connect(dx1,dy1,dz1,sizeX,sizeY,sizeZ);
		}
		if(!this.highHarmonics) {
			if(this.shouldResetUnionFind) {
				this.resetUnionFind();
			} else {
				var _g15 = 0;
				var _g9 = this.fillLogs.length;
				while(_g15 < _g9) {
					var i2 = _g15++;
					var pos3 = this.fillLogs[i2];
					var dx2 = (pos3 & 255) - this.boundMinX;
					var dy2 = (pos3 >> 8 & 255) - this.boundMinY + 1;
					var dz2 = (pos3 >> 16 & 255) - this.boundMinZ;
					if(!this.isGrounded(dx2,dy2,dz2,sizeX,sizeY,sizeZ)) {
						throw new js__$Boot_HaxeError("新しいセルがグラウンドじゃありません。");
					}
				}
			}
		}
		var _g16 = 0;
		var _g10 = this.fillLogs.length;
		while(_g16 < _g10) {
			var i3 = _g16++;
			this.fillLogs.pop();
		}
		var _g17 = 0;
		var _g18 = this.bots;
		while(_g17 < _g18.length) {
			var bot = _g18[_g17];
			++_g17;
			bot.forward();
			if(bot.isActive) {
				this.energy += 20;
			}
		}
		this.botIndex = 0;
		while(this.botIndex < Bot.MAX) {
			if(this.bots[this.botIndex].isActive) {
				break;
			}
			this.botIndex += 1;
		}
		if(this.highHarmonics) {
			this.energy += this.size * this.size * this.size * 30;
		} else {
			this.energy += this.size * this.size * this.size * 3;
		}
		this.step++;
	}
	,forward: function(command) {
		if(this.halted) {
			throw new js__$Boot_HaxeError("すでにHaltしてます");
		}
		var bot = this.bots[this.botIndex];
		var _g = _$Command_Command_$Impl_$.kind(command);
		switch(_g) {
		case 0:
			this.halted = true;
			if(this.getActiveBotsCount() != 1) {
				throw new js__$Boot_HaxeError("ボットが複数の状態でhaltしました:" + this.getActiveBotsCount());
			}
			if((bot.position & 255) != 0 || (bot.position >> 8 & 255) != 0 || (bot.position >> 16 & 255) != 0) {
				throw new js__$Boot_HaxeError("原点以外でhaltしました:" + (bot.position & 255) + "," + (bot.position >> 8 & 255) + "," + (bot.position >> 16 & 255));
			}
			var _g1 = 0;
			var _g2 = this.size;
			while(_g1 < _g2) {
				var x = _g1++;
				var _g3 = 0;
				var _g21 = this.size;
				while(_g3 < _g21) {
					var y = _g3++;
					var _g5 = 0;
					var _g4 = this.size;
					while(_g5 < _g4) {
						var z = _g5++;
						if(this.currentModel[x][y][z] != this.targetModel[x][y][z]) {
							throw new js__$Boot_HaxeError("モデルが完成してない状態でHaltしました:" + x + "," + y + "," + z);
						}
					}
				}
			}
			break;
		case 1:
			this.highHarmonics = !this.highHarmonics;
			this.shouldResetUnionFind = true;
			break;
		case 2:
			break;
		case 3:
			bot.move(_$Command_Command_$Impl_$.direction1(command),_$Command_Command_$Impl_$["long"](command));
			var tmp = this;
			var tmp1 = tmp.energy;
			var value = _$Command_Command_$Impl_$["long"](command);
			tmp.energy = tmp1 + 2 * (value < 0 ? -value : value);
			break;
		case 4:
			bot.move(_$Command_Command_$Impl_$.direction1(command),_$Command_Command_$Impl_$.short1(command));
			bot.move(_$Command_Command_$Impl_$.direction2(command),_$Command_Command_$Impl_$.short2(command));
			var tmp2 = this;
			var tmp3 = tmp2.energy;
			var value1 = _$Command_Command_$Impl_$.short1(command);
			var value2 = _$Command_Command_$Impl_$.short2(command);
			tmp2.energy = tmp3 + 2 * ((value1 < 0 ? -value1 : value1) + 2 + (value2 < 0 ? -value2 : value2));
			break;
		case 5:
			var nd = _$Command_Command_$Impl_$.nd(command);
			var m = _$Command_Command_$Impl_$.m(command);
			if(m < 0 || bot.seeds.length <= m) {
				throw new js__$Boot_HaxeError("ボットID:" + bot.id + "seedsが範囲外です。" + m + ":" + bot.seeds.length);
			}
			var id = bot.seeds.shift();
			var target = this.bots[id];
			target.position = _$Position_Position_$Impl_$.near(bot.position,nd);
			target.isNextActive = true;
			target.seeds = bot.seeds.splice(0,m).slice();
			this.energy += 24;
			break;
		case 6:
			this.fill(_$Position_Position_$Impl_$.near(bot.position,_$Command_Command_$Impl_$.nd(command)));
			break;
		case 7:
			this["void"](_$Position_Position_$Impl_$.near(bot.position,_$Command_Command_$Impl_$.nd(command)));
			break;
		case 8:
			var selfPosition = bot.position;
			var nd1 = _$Command_Command_$Impl_$.nd(command);
			if(this.reservedFusionS.exists(selfPosition)) {
				var targetBot = this.bots[this.reservedFusionS.get(selfPosition)];
				if(_$Position_Position_$Impl_$.near(bot.position,nd1) != targetBot.position) {
					throw new js__$Boot_HaxeError("FussionPが指す座標が、FissionSと一致してません");
				}
				this.fusion(bot,targetBot);
				this.reservedFusionS.remove(selfPosition);
			} else {
				var this1 = this.reservedFusionP;
				var k = _$Position_Position_$Impl_$.near(bot.position,nd1);
				var v = bot.id;
				this1.set(k,v);
			}
			break;
		case 9:
			var selfPosition1 = bot.position;
			var nd2 = _$Command_Command_$Impl_$.nd(command);
			if(this.reservedFusionP.exists(selfPosition1)) {
				var targetBot1 = this.bots[this.reservedFusionP.get(selfPosition1)];
				if(_$Position_Position_$Impl_$.near(bot.position,nd2) != targetBot1.position) {
					throw new js__$Boot_HaxeError("FussionSが指す座標が、FissionPと一致してません");
				}
				this.fusion(targetBot1,bot);
				this.reservedFusionP.remove(selfPosition1);
			} else {
				var this2 = this.reservedFusionS;
				var k1 = _$Position_Position_$Impl_$.near(bot.position,nd2);
				var v1 = bot.id;
				this2.set(k1,v1);
			}
			break;
		case 10:
			var far = _$Command_Command_$Impl_$.far(command);
			var pos = _$Position_Position_$Impl_$.near(bot.position,_$Command_Command_$Impl_$.nd(command));
			var firstPos = _$Position_Position_$Impl_$.far(pos,_$Far_Far_$Impl_$.toFirst(far));
			var positive = _$Far_Far_$Impl_$.toPositive(far);
			if(this.gFillLog.exists(firstPos)) {
				var existingFar = this.gFillLog.get(firstPos);
				if(existingFar.far != positive) {
					throw new js__$Boot_HaxeError("GFillの形が一致しません:" + bot.id);
				}
				existingFar.count += 1;
			} else {
				var this3 = this.gFillLog;
				var v2 = new _$Game_FarAndCount(positive);
				this3.set(firstPos,v2);
			}
			if(_$Far_Far_$Impl_$.isPositive(far)) {
				var pos1 = _$Position_Position_$Impl_$.near(bot.position,_$Command_Command_$Impl_$.nd(command));
				var _g11 = 0;
				var _g6 = (far & 255) - 30 + 1;
				while(_g11 < _g6) {
					var x1 = _g11++;
					var _g31 = 0;
					var _g22 = (far >> 8 & 255) - 30 + 1;
					while(_g31 < _g22) {
						var y1 = _g31++;
						var _g51 = 0;
						var _g41 = (far >> 16 & 255) - 30 + 1;
						while(_g51 < _g41) {
							var z1 = _g51++;
							this.fill(_$Position_Position_$Impl_$.moveXyz(pos1,x1,y1,z1));
						}
					}
				}
			}
			break;
		case 11:
			var far1 = _$Command_Command_$Impl_$.far(command);
			var pos2 = _$Position_Position_$Impl_$.near(bot.position,_$Command_Command_$Impl_$.nd(command));
			var firstPos1 = _$Position_Position_$Impl_$.far(pos2,_$Far_Far_$Impl_$.toFirst(far1));
			var positive1 = _$Far_Far_$Impl_$.toPositive(far1);
			if(this.gVoidLog.exists(firstPos1)) {
				var existingFar1 = this.gVoidLog.get(firstPos1);
				if(existingFar1.far != positive1) {
					throw new js__$Boot_HaxeError("GVoidの形が一致しません:" + bot.id);
				}
				existingFar1.count += 1;
			} else {
				var this4 = this.gVoidLog;
				var v3 = new _$Game_FarAndCount(positive1);
				this4.set(firstPos1,v3);
			}
			if(_$Far_Far_$Impl_$.isPositive(far1)) {
				var _g12 = 0;
				var _g7 = (far1 & 255) - 30 + 1;
				while(_g12 < _g7) {
					var x2 = _g12++;
					var _g32 = 0;
					var _g23 = (far1 >> 8 & 255) - 30 + 1;
					while(_g32 < _g23) {
						var y2 = _g32++;
						var _g52 = 0;
						var _g42 = (far1 >> 16 & 255) - 30 + 1;
						while(_g52 < _g42) {
							var z2 = _g52++;
							this["void"](_$Position_Position_$Impl_$.moveXyz(pos2,x2,y2,z2));
						}
					}
				}
			}
			break;
		}
		this.botIndex += 1;
		while(this.botIndex < Bot.MAX) {
			if(this.bots[this.botIndex].isActive) {
				break;
			}
			this.botIndex += 1;
		}
	}
	,isInBound: function(p) {
		if(!((p & 255) < 0 || (p >> 8 & 255) < 0 || (p >> 16 & 255) < 0 || (p & 255) >= this.size || (p >> 8 & 255) >= this.size)) {
			return (p >> 16 & 255) >= this.size;
		} else {
			return true;
		}
	}
	,checkBound: function(p) {
		if(this.isInBound(p)) {
			throw new js__$Boot_HaxeError((p & 255) + "," + (p >> 8 & 255) + "," + (p >> 16 & 255) + "は" + this.size + "の範囲外です");
		}
		return p;
	}
	,fill: function(pos) {
		this.checkBound(pos);
		if(!this.currentModel[pos & 255][pos >> 8 & 255][pos >> 16 & 255]) {
			this.energy += 12;
			this.currentModel[pos & 255][pos >> 8 & 255][pos >> 16 & 255] = true;
		} else {
			this.energy += 6;
		}
		if(this.boundMinX > (pos & 255)) {
			this.boundMinX = pos & 255;
			this.shouldResetUnionFind = true;
		}
		if(this.boundMinY > (pos >> 8 & 255)) {
			this.boundMinY = pos >> 8 & 255;
			this.shouldResetUnionFind = true;
		}
		if(this.boundMinZ > (pos >> 16 & 255)) {
			this.boundMinZ = pos >> 16 & 255;
			this.shouldResetUnionFind = true;
		}
		if(this.boundMaxX < (pos & 255)) {
			this.boundMaxX = pos & 255;
			this.shouldResetUnionFind = true;
		}
		if(this.boundMaxY < (pos >> 8 & 255)) {
			this.boundMaxY = pos >> 8 & 255;
			this.shouldResetUnionFind = true;
		}
		if(this.boundMaxZ < (pos >> 16 & 255)) {
			this.boundMaxZ = pos >> 16 & 255;
			this.shouldResetUnionFind = true;
		}
		if(this.currentMinX > (pos & 255)) {
			this.currentMinX = pos & 255;
		}
		if(this.currentMinY > (pos >> 8 & 255)) {
			this.currentMinY = pos >> 8 & 255;
		}
		if(this.currentMinZ > (pos >> 16 & 255)) {
			this.currentMinZ = pos >> 16 & 255;
		}
		if(this.currentMaxX < (pos & 255)) {
			this.currentMaxX = pos & 255;
		}
		if(this.currentMaxY < (pos >> 8 & 255)) {
			this.currentMaxY = pos >> 8 & 255;
		}
		if(this.currentMaxZ < (pos >> 16 & 255)) {
			this.currentMaxZ = pos >> 16 & 255;
		}
		this.fillLogs.push(pos);
	}
	,'void': function(pos) {
		this.checkBound(pos);
		if(this.currentModel[pos & 255][pos >> 8 & 255][pos >> 16 & 255]) {
			this.energy -= 12;
			this.currentModel[pos & 255][pos >> 8 & 255][pos >> 16 & 255] = false;
		} else {
			this.energy += 3;
		}
		this.voidLogs.push(pos);
	}
	,getBackwardCommand: function(command) {
		var bot = this.getCurrentBot();
		var _g = _$Command_Command_$Impl_$.kind(command);
		switch(_g) {
		case 0:
			return BackwardCommand.Halt;
		case 1:
			return BackwardCommand.Flip;
		case 2:
			return BackwardCommand.Empty;
		case 3:
			return BackwardCommand.SMove(bot.position);
		case 4:
			return BackwardCommand.LMove(bot.position);
		case 5:
			return BackwardCommand.Fission(bot.seeds[0]);
		case 6:
			return BackwardCommand.Fill(_$Command_Command_$Impl_$.nd(command));
		case 7:
			return BackwardCommand.SVoid(_$Command_Command_$Impl_$.nd(command));
		case 8:
			var selfPosition = bot.position;
			if(this.reservedFusionS.exists(selfPosition)) {
				var s = this.reservedFusionS.get(selfPosition);
				return BackwardCommand.Fusion(bot.id,s,bot.seeds.slice(),this.bots[s].seeds.slice());
			} else {
				return BackwardCommand.ReservFusionP;
			}
			break;
		case 9:
			var selfPosition1 = bot.position;
			if(this.reservedFusionP.exists(selfPosition1)) {
				var p = this.reservedFusionP.get(selfPosition1);
				return BackwardCommand.Fusion(p,bot.id,this.bots[p].seeds.slice(),bot.seeds.slice());
			} else {
				return BackwardCommand.ReservFusionS;
			}
			break;
		case 10:
			var far = _$Command_Command_$Impl_$.far(command);
			if(_$Far_Far_$Impl_$.isPositive(far)) {
				var pos = _$Position_Position_$Impl_$.near(bot.position,_$Command_Command_$Impl_$.nd(command));
				return BackwardCommand.GFill(pos,this.createHistory3D(pos,far));
			} else {
				return BackwardCommand.Empty;
			}
			break;
		case 11:
			var far1 = _$Command_Command_$Impl_$.far(command);
			if(_$Far_Far_$Impl_$.isPositive(far1)) {
				var pos1 = _$Position_Position_$Impl_$.near(bot.position,_$Command_Command_$Impl_$.nd(command));
				return BackwardCommand.GVoid(pos1,this.createHistory3D(pos1,far1));
			} else {
				return BackwardCommand.Empty;
			}
			break;
		}
	}
	,fusion: function(primaryBot,secondaryBot) {
		var len = secondaryBot.seeds.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			primaryBot.seeds.push(secondaryBot.seeds.pop());
		}
		primaryBot.seeds.push(secondaryBot.id);
		primaryBot.seeds.sort(Game.compare);
		this.energy -= 24;
		secondaryBot.isNextActive = false;
	}
	,revertStep: function(energy,previousActivates) {
		var _g1 = 0;
		var _g = this.bots.length;
		while(_g1 < _g) {
			var i = _g1++;
			var bot = this.bots[i];
			bot.isNextActive = bot.isActive;
			bot.isActive = previousActivates[i];
		}
		this.botIndex = Bot.MAX;
		this.energy = energy;
		this.step--;
	}
	,backward: function(command) {
		this.botIndex -= 1;
		while(this.botIndex >= 0) {
			if(this.bots[this.botIndex].isActive) {
				break;
			}
			this.botIndex -= 1;
		}
		var bot = this.bots[this.botIndex];
		switch(command[1]) {
		case 0:
			this.highHarmonics = !this.highHarmonics;
			break;
		case 1:
			break;
		case 2:
			this.halted = false;
			break;
		case 3:
			var position = command[2];
			bot.position = position;
			break;
		case 4:
			var position1 = command[2];
			bot.position = position1;
			break;
		case 5:
			var target = command[2];
			this.fusion(bot,this.bots[target]);
			break;
		case 6:
			var secondarySeeds = command[5];
			var primarySeeds = command[4];
			var secondary = command[3];
			var primary = command[2];
			this.bots[primary].seeds = primarySeeds.slice();
			this.bots[secondary].seeds = secondarySeeds.slice();
			break;
		case 7:
			var near = command[2];
			this["void"](_$Position_Position_$Impl_$.near(bot.position,near));
			break;
		case 8:
			var near1 = command[2];
			this.fill(_$Position_Position_$Impl_$.near(bot.position,near1));
			break;
		case 9:
			var history = command[3];
			var pos = command[2];
			var _g1 = 0;
			var _g = history.length;
			while(_g1 < _g) {
				var x = _g1++;
				var plain = history[x];
				var _g3 = 0;
				var _g2 = plain.length;
				while(_g3 < _g2) {
					var y = _g3++;
					var line = plain[y];
					var _g5 = 0;
					var _g4 = line.length;
					while(_g5 < _g4) {
						var z = _g5++;
						this.currentModel[(pos & 255) + x][(pos >> 8 & 255) + y][(pos >> 16 & 255) + z] = line[z];
					}
				}
			}
			break;
		case 10:
			var history1 = command[3];
			var pos1 = command[2];
			var _g11 = 0;
			var _g6 = history1.length;
			while(_g11 < _g6) {
				var x1 = _g11++;
				var plain1 = history1[x1];
				var _g31 = 0;
				var _g21 = plain1.length;
				while(_g31 < _g21) {
					var y1 = _g31++;
					var line1 = plain1[y1];
					var _g51 = 0;
					var _g41 = line1.length;
					while(_g51 < _g41) {
						var z1 = _g51++;
						this.currentModel[(pos1 & 255) + x1][(pos1 >> 8 & 255) + y1][(pos1 >> 16 & 255) + z1] = line1[z1];
					}
				}
			}
			break;
		case 11:
			this.reservedFusionP.remove(bot.position);
			break;
		case 12:
			this.reservedFusionS.remove(bot.position);
			break;
		}
	}
	,getCurrentBot: function() {
		return this.bots[this.botIndex];
	}
	,getPreviousActives: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.bots;
		while(_g1 < _g2.length) {
			var bot = _g2[_g1];
			++_g1;
			_g.push(bot.isActive);
		}
		return _g;
	}
	,createHistory3D: function(pos,far) {
		var this1 = new Array((far & 255) - 30 + 1);
		var result = this1;
		var _g1 = 0;
		var _g = (far & 255) - 30 + 1;
		while(_g1 < _g) {
			var x = _g1++;
			var this2 = new Array((far >> 8 & 255) - 30 + 1);
			result[x] = this2;
			var _g3 = 0;
			var _g2 = (far >> 8 & 255) - 30 + 1;
			while(_g3 < _g2) {
				var y = _g3++;
				var this3 = new Array((far >> 16 & 255) - 30 + 1);
				result[x][y] = this3;
				var _g5 = 0;
				var _g4 = (far >> 16 & 255) - 30 + 1;
				while(_g5 < _g4) {
					var z = _g5++;
					result[x][y][z] = this.currentModel[(pos & 255) + x][(pos >> 8 & 255) + y][(pos >> 16 & 255) + z];
				}
			}
		}
		return result;
	}
	,resetUnionFind: function() {
		this.shouldResetUnionFind = false;
		var sizeX = this.boundMaxX - this.boundMinX + 1;
		var sizeY = this.boundMaxY - this.boundMinY + 1 + 1;
		var sizeZ = this.boundMaxZ - this.boundMinZ + 1;
		this.unionFind = new UnionFind(sizeX * sizeY * sizeZ);
		var _g1 = 0;
		var _g = sizeX;
		while(_g1 < _g) {
			var dx = _g1++;
			var _g3 = 0;
			var _g2 = sizeZ;
			while(_g3 < _g2) {
				var dz = _g3++;
				this.connect(dx,0,dz,sizeX,sizeY,sizeZ);
			}
			var _g31 = 1;
			var _g21 = sizeY;
			while(_g31 < _g21) {
				var dy = _g31++;
				var _g5 = 0;
				var _g4 = sizeZ;
				while(_g5 < _g4) {
					var dz1 = _g5++;
					var x = this.boundMinX + dx;
					var y = this.boundMinY + dy - 1;
					var z = this.boundMinZ + dz1;
					if(this.currentModel[x][y][z]) {
						this.connect(dx,dy,dz1,sizeX,sizeY,sizeZ);
					}
				}
			}
		}
		if(!this.highHarmonics) {
			var _g11 = 0;
			var _g6 = sizeX;
			while(_g11 < _g6) {
				var dx1 = _g11++;
				var _g32 = 1;
				var _g22 = sizeY;
				while(_g32 < _g22) {
					var dy1 = _g32++;
					var _g51 = 0;
					var _g41 = sizeZ;
					while(_g51 < _g41) {
						var dz2 = _g51++;
						var x1 = this.boundMinX + dx1;
						var y1 = this.boundMinY + dy1 - 1;
						var z1 = this.boundMinZ + dz2;
						if(this.currentModel[x1][y1][z1]) {
							var localGrounded = this.isGrounded(dx1,dy1,dz2,sizeX,sizeY,sizeZ);
							if(!localGrounded) {
								throw new js__$Boot_HaxeError("グラウンドじゃありません。");
							}
						}
					}
				}
			}
		}
	}
	,connect: function(dx,dy,dz,sizeX,sizeY,sizeZ) {
		var x = this.boundMinX + dx;
		var y = this.boundMinY + dy - 1;
		var z = this.boundMinZ + dz;
		var center = dx * sizeZ * sizeY + dy * sizeZ + dz;
		if(dy == 0) {
			var _this = this.unionFind;
			var x1 = center;
			var y1 = 0 * sizeZ * sizeY + 0 * sizeZ;
			if(_this.data[x1] < 0) {
				x1 = x1;
			} else {
				x1 = _this.data[x1] = _this.root(_this.data[x1]);
			}
			if(_this.data[y1] < 0) {
				y1 = y1;
			} else {
				y1 = _this.data[y1] = _this.root(_this.data[y1]);
			}
			if(x1 != y1) {
				if(_this.data[y1] < _this.data[x1]) {
					var tmp = x1;
					x1 = y1;
					y1 = tmp;
				}
				var _g = x1;
				var _g1 = _this.data;
				_g1[_g] = _g1[_g] + _this.data[y1];
				_this.data[y1] = x1;
			}
		} else {
			if(dx > 0 && this.currentModel[x - 1][y][z]) {
				var _this1 = this.unionFind;
				var x2 = center;
				var y2 = (dx - 1) * sizeZ * sizeY + dy * sizeZ + dz;
				if(_this1.data[x2] < 0) {
					x2 = x2;
				} else {
					x2 = _this1.data[x2] = _this1.root(_this1.data[x2]);
				}
				if(_this1.data[y2] < 0) {
					y2 = y2;
				} else {
					y2 = _this1.data[y2] = _this1.root(_this1.data[y2]);
				}
				if(x2 != y2) {
					if(_this1.data[y2] < _this1.data[x2]) {
						var tmp1 = x2;
						x2 = y2;
						y2 = tmp1;
					}
					var _g2 = x2;
					var _g11 = _this1.data;
					_g11[_g2] = _g11[_g2] + _this1.data[y2];
					_this1.data[y2] = x2;
				}
			}
			if(dy == 1 || this.currentModel[x][y - 1][z]) {
				var _this2 = this.unionFind;
				var x3 = center;
				var y3 = dx * sizeZ * sizeY + (dy - 1) * sizeZ + dz;
				if(_this2.data[x3] < 0) {
					x3 = x3;
				} else {
					x3 = _this2.data[x3] = _this2.root(_this2.data[x3]);
				}
				if(_this2.data[y3] < 0) {
					y3 = y3;
				} else {
					y3 = _this2.data[y3] = _this2.root(_this2.data[y3]);
				}
				if(x3 != y3) {
					if(_this2.data[y3] < _this2.data[x3]) {
						var tmp2 = x3;
						x3 = y3;
						y3 = tmp2;
					}
					var _g3 = x3;
					var _g12 = _this2.data;
					_g12[_g3] = _g12[_g3] + _this2.data[y3];
					_this2.data[y3] = x3;
				}
			}
			if(dz > 0 && this.currentModel[x][y][z - 1]) {
				var _this3 = this.unionFind;
				var x4 = center;
				var y4 = dx * sizeZ * sizeY + dy * sizeZ + (dz - 1);
				if(_this3.data[x4] < 0) {
					x4 = x4;
				} else {
					x4 = _this3.data[x4] = _this3.root(_this3.data[x4]);
				}
				if(_this3.data[y4] < 0) {
					y4 = y4;
				} else {
					y4 = _this3.data[y4] = _this3.root(_this3.data[y4]);
				}
				if(x4 != y4) {
					if(_this3.data[y4] < _this3.data[x4]) {
						var tmp3 = x4;
						x4 = y4;
						y4 = tmp3;
					}
					var _g4 = x4;
					var _g13 = _this3.data;
					_g13[_g4] = _g13[_g4] + _this3.data[y4];
					_this3.data[y4] = x4;
				}
			}
			if(dx < sizeX - 1 && this.currentModel[x + 1][y][z]) {
				var _this4 = this.unionFind;
				var x5 = center;
				var y5 = (dx + 1) * sizeZ * sizeY + dy * sizeZ + dz;
				if(_this4.data[x5] < 0) {
					x5 = x5;
				} else {
					x5 = _this4.data[x5] = _this4.root(_this4.data[x5]);
				}
				if(_this4.data[y5] < 0) {
					y5 = y5;
				} else {
					y5 = _this4.data[y5] = _this4.root(_this4.data[y5]);
				}
				if(x5 != y5) {
					if(_this4.data[y5] < _this4.data[x5]) {
						var tmp4 = x5;
						x5 = y5;
						y5 = tmp4;
					}
					var _g5 = x5;
					var _g14 = _this4.data;
					_g14[_g5] = _g14[_g5] + _this4.data[y5];
					_this4.data[y5] = x5;
				}
			}
			if(dy < sizeY - 1 && this.currentModel[x][y + 1][z]) {
				var _this5 = this.unionFind;
				var x6 = center;
				var y6 = dx * sizeZ * sizeY + (dy + 1) * sizeZ + dz;
				if(_this5.data[x6] < 0) {
					x6 = x6;
				} else {
					x6 = _this5.data[x6] = _this5.root(_this5.data[x6]);
				}
				if(_this5.data[y6] < 0) {
					y6 = y6;
				} else {
					y6 = _this5.data[y6] = _this5.root(_this5.data[y6]);
				}
				if(x6 != y6) {
					if(_this5.data[y6] < _this5.data[x6]) {
						var tmp5 = x6;
						x6 = y6;
						y6 = tmp5;
					}
					var _g6 = x6;
					var _g15 = _this5.data;
					_g15[_g6] = _g15[_g6] + _this5.data[y6];
					_this5.data[y6] = x6;
				}
			}
			if(dz < sizeZ - 1 && this.currentModel[x][y][z + 1]) {
				var _this6 = this.unionFind;
				var x7 = center;
				var y7 = dx * sizeZ * sizeY + dy * sizeZ + (dz + 1);
				if(_this6.data[x7] < 0) {
					x7 = x7;
				} else {
					x7 = _this6.data[x7] = _this6.root(_this6.data[x7]);
				}
				if(_this6.data[y7] < 0) {
					y7 = y7;
				} else {
					y7 = _this6.data[y7] = _this6.root(_this6.data[y7]);
				}
				if(x7 != y7) {
					if(_this6.data[y7] < _this6.data[x7]) {
						var tmp6 = x7;
						x7 = y7;
						y7 = tmp6;
					}
					var _g7 = x7;
					var _g16 = _this6.data;
					_g16[_g7] = _g16[_g7] + _this6.data[y7];
					_this6.data[y7] = x7;
				}
			}
		}
	}
	,getUnionValue: function(dx,dy,dz,sizeX,sizeY,sizeZ) {
		return dx * sizeZ * sizeY + dy * sizeZ + dz;
	}
	,isGrounded: function(dx,dy,dz,sizeX,sizeY,sizeZ) {
		var _this = this.unionFind;
		var x = 0 * sizeZ * sizeY + 0 * sizeZ;
		var y = dx * sizeZ * sizeY + dy * sizeZ + dz;
		return (_this.data[x] < 0 ? x : _this.data[x] = _this.root(_this.data[x])) == (_this.data[y] < 0 ? y : _this.data[y] = _this.root(_this.data[y]));
	}
	,__class__: Game
};
var _$Game_FarAndCount = function(far) {
	this.far = far;
	this.count = 1;
};
_$Game_FarAndCount.__name__ = true;
_$Game_FarAndCount.prototype = {
	__class__: _$Game_FarAndCount
};
var _$Game_Grounded = { __ename__ : true, __constructs__ : ["Yes","No","Unknown"] };
_$Game_Grounded.Yes = ["Yes",0];
_$Game_Grounded.Yes.toString = $estr;
_$Game_Grounded.Yes.__enum__ = _$Game_Grounded;
_$Game_Grounded.No = ["No",1];
_$Game_Grounded.No.toString = $estr;
_$Game_Grounded.No.__enum__ = _$Game_Grounded;
_$Game_Grounded.Unknown = ["Unknown",2];
_$Game_Grounded.Unknown.toString = $estr;
_$Game_Grounded.Unknown.__enum__ = _$Game_Grounded;
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	Main.rootContext = new core_RootContext();
	Main.rootThree = new ThreeView(Main.rootContext);
	Main.rootContext.updateUi = Main.render;
	Main.rootContext.updateGraphic = ($_=Main.rootThree,$bind($_,$_.update));
	Main.update();
	window.document.onkeydown = Main.onKeyDown;
};
Main.update = function() {
	Main.rootContext.onFrame(15);
	haxe_Timer.delay(Main.update,15);
};
Main.render = function() {
	ReactDOM.render(React.createElement(component_root_RootView,{ context : Main.rootContext}),window.document.getElementById("control"));
};
Main.onKeyDown = function(e) {
	if(e.altKey || e.ctrlKey || e.shiftKey) {
		return true;
	}
	var _g = e.keyCode;
	return true;
};
Math.__name__ = true;
var _$Near_Near_$Impl_$ = {};
_$Near_Near_$Impl_$.__name__ = true;
_$Near_Near_$Impl_$.get_x = function(this1) {
	return (this1 / 9 | 0) - 1;
};
_$Near_Near_$Impl_$.get_y = function(this1) {
	return (this1 / 3 | 0) % 3 - 1;
};
_$Near_Near_$Impl_$.get_z = function(this1) {
	return this1 % 3 - 1;
};
_$Near_Near_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
_$Near_Near_$Impl_$.fromXyz = function(x,y,z) {
	return _$Near_Near_$Impl_$._new((x + 1) * 9 | (y + 1) * 3 | z + 1);
};
_$Near_Near_$Impl_$.toByte = function(this1) {
	return this1;
};
var _$Position_Position_$Impl_$ = {};
_$Position_Position_$Impl_$.__name__ = true;
_$Position_Position_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
_$Position_Position_$Impl_$.fromXyz = function(x,y,z) {
	return _$Position_Position_$Impl_$._new(x + (y << 8) + (z << 16));
};
_$Position_Position_$Impl_$.get_x = function(this1) {
	return this1 & 255;
};
_$Position_Position_$Impl_$.get_y = function(this1) {
	return this1 >> 8 & 255;
};
_$Position_Position_$Impl_$.get_z = function(this1) {
	return this1 >> 16 & 255;
};
_$Position_Position_$Impl_$.move = function(this1,direction,length) {
	switch(direction) {
	case 1:
		return _$Position_Position_$Impl_$.moveX(this1,length);
	case 2:
		return _$Position_Position_$Impl_$.moveY(this1,length);
	case 3:
		return _$Position_Position_$Impl_$.moveZ(this1,length);
	}
};
_$Position_Position_$Impl_$.moveXyz = function(this1,x,y,z) {
	return _$Position_Position_$Impl_$.moveZ(_$Position_Position_$Impl_$.moveY(_$Position_Position_$Impl_$.moveX(this1,x),y),z);
};
_$Position_Position_$Impl_$.moveX = function(this1,diff) {
	var prev = this1;
	var result = this1 + diff;
	if((result & -256) != (this1 & -256)) {
		throw new js__$Boot_HaxeError("out of cube: x: " + diff);
	}
	return _$Position_Position_$Impl_$._new(result);
};
_$Position_Position_$Impl_$.moveY = function(this1,diff) {
	var prev = this1;
	var result = this1 + (diff << 8);
	if((result & -65281) != (this1 & -65281)) {
		throw new js__$Boot_HaxeError("out of cube: y: " + diff);
	}
	return _$Position_Position_$Impl_$._new(result);
};
_$Position_Position_$Impl_$.moveZ = function(this1,diff) {
	var prev = this1;
	var result = this1 + (diff << 16);
	if((result & -16711681) != (this1 & -16711681)) {
		throw new js__$Boot_HaxeError("out of cube: z: " + diff);
	}
	return _$Position_Position_$Impl_$._new(result);
};
_$Position_Position_$Impl_$.near = function(this1,nd) {
	return _$Position_Position_$Impl_$.moveZ(_$Position_Position_$Impl_$.moveY(_$Position_Position_$Impl_$.moveX(this1,(nd / 9 | 0) - 1),(nd / 3 | 0) % 3 - 1),nd % 3 - 1);
};
_$Position_Position_$Impl_$.far = function(this1,f) {
	return _$Position_Position_$Impl_$.moveZ(_$Position_Position_$Impl_$.moveY(_$Position_Position_$Impl_$.moveX(this1,(f & 255) - 30),(f >> 8 & 255) - 30),(f >> 16 & 255) - 30);
};
_$Position_Position_$Impl_$.isValidNear = function(this1,nd) {
	return !((this1 + ((nd / 9 | 0) - 1) & -256) != (this1 & -256) || (this1 + ((nd / 3 | 0) % 3 - 1 << 8) & -65281) != (this1 & -65281) || (this1 + (nd % 3 - 1 << 16) & -16711681) != (this1 & -16711681));
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s = c + s;
	return s;
};
var ThreeView = function(rootContext) {
	this.rootContext = rootContext;
	var w = 900;
	var h = 750;
	this.scene = new THREE.Scene();
	this.cubes = [];
	this.activeCubes = 0;
	var geometry = new THREE.PlaneGeometry(600,600,1,1);
	var material = new THREE.MeshLambertMaterial({ color : 10031377});
	var plane = new THREE.Mesh(geometry,material);
	material.opacity = 0.3;
	material.transparent = true;
	plane.renderOrder += 1000;
	plane.position.set(0,-300,0);
	plane.rotateOnAxis(new THREE.Vector3(1,0,0),-Math.PI / 2);
	this.scene.add(plane);
	var pointLight = new THREE.PointLight(7829367,1,1000000,2);
	pointLight.position.set(0,0,200);
	this.scene.add(pointLight);
	var pointLight1 = new THREE.PointLight(7829367,1,1000000,2);
	pointLight1.position.set(0,100,400);
	this.scene.add(pointLight1);
	this.camera = new THREE.PerspectiveCamera(70,w / h,1,3000);
	this.camera.position.z = 750;
	this.camera.position.y = 400;
	this.camera.lookAt(new THREE.Vector3(0,0,0));
	this.scene.add(this.camera);
	this.renderer = new THREE.WebGLRenderer();
	this.renderer.setSize(w,h);
	var light = new THREE.AmbientLight(6710886);
	this.scene.add(light);
	window.document.getElementById("three").appendChild(this.renderer.domElement);
	var _g = [];
	var _g2 = 0;
	var _g1 = Bot.MAX;
	while(_g2 < _g1) {
		var i = _g2++;
		var geometry1 = new THREE.PlaneGeometry(600,600,1,1);
		var material1 = new THREE.MeshLambertMaterial({ color : 15702289});
		var mesh = new THREE.Mesh(geometry1,material1);
		material1.opacity = 0.5;
		material1.transparent = true;
		mesh.visible = false;
		this.scene.add(mesh);
		_g.push(mesh);
	}
	this.bots = _g;
	this.update();
};
ThreeView.__name__ = true;
ThreeView.prototype = {
	update: function() {
		var angle = this.rootContext.cameraAngle * Math.PI * 0.499 + 0.00001;
		this.camera.position.z = Math.sin(angle) * 800;
		this.camera.position.y = Math.cos(angle) * 800;
		this.camera.lookAt(new THREE.Vector3(0,0,0));
		var _g = this.rootContext.game;
		switch(_g[1]) {
		case 0:
			var game = _g[2];
			var count = 0;
			var size = game.size;
			var _g1 = 0;
			var _g2 = Bot.MAX;
			while(_g1 < _g2) {
				var i = _g1++;
				var logic = game.bots[i];
				var view = this.bots[i];
				var pos = logic.position;
				if(logic.isActive) {
					var rotatedX;
					var rotatedZ;
					var _g21 = this.rootContext.rot;
					switch(_g21) {
					case 0:
						rotatedX = pos & 255;
						rotatedZ = pos >> 16 & 255;
						break;
					case 1:
						rotatedX = size - (pos >> 16 & 255) - 1;
						rotatedZ = pos & 255;
						break;
					case 2:
						rotatedX = size - (pos & 255) - 1;
						rotatedZ = size - (pos >> 16 & 255) - 1;
						break;
					case 3:
						rotatedX = pos >> 16 & 255;
						rotatedZ = size - (pos & 255) - 1;
						break;
					default:
						throw new js__$Boot_HaxeError("unknown rot");
					}
					view.position.set(rotatedX * 600 / size - 300,(pos >> 8 & 255) * 600 / size - 300,rotatedZ * 600 / size - 300);
					var scale = 1 / size * 0.5;
					view.scale.set(scale,scale,scale);
					view.visible = true;
				} else {
					view.visible = false;
				}
			}
			var _g11 = 0;
			var _g3 = size;
			while(_g11 < _g3) {
				var z = _g11++;
				var _g31 = 0;
				var _g22 = size;
				while(_g31 < _g22) {
					var y = _g31++;
					var successY = null;
					var successZ = null;
					var failY = null;
					var failZ = null;
					var targetY = null;
					var targetZ = null;
					var _g5 = 0;
					var _g4 = size;
					while(_g5 < _g4) {
						var x = _g5++;
						var targetValue = this.getTarget(game,x,y,z);
						var currentValue = this.getCurrent(game,x,y,z);
						if(targetValue && currentValue) {
							var nextZ = z + 1;
							if(nextZ == size || !this.getCurrent(game,x,y,nextZ) || !this.getTarget(game,x,y,nextZ)) {
								if(successZ == null) {
									var cube = this.getCube(count);
									this.setPlaneZ(cube,x,y,z,size);
									this.setMaterial(cube.material,1136127,0.1);
									successZ = cube;
									++count;
								} else {
									successZ.position.x += 1 / size / 2 * 600;
									successZ.scale.x += 1 / size;
								}
							} else {
								successZ = null;
							}
							var nextY = y + 1;
							if(nextY == size || !this.getCurrent(game,x,nextY,z) || !this.getTarget(game,x,nextY,z)) {
								if(successY == null) {
									var cube1 = this.getCube(count);
									this.setPlaneY(cube1,x,y,z,size);
									this.setMaterial(cube1.material,1140479,0.1);
									successY = cube1;
									++count;
								} else {
									successY.position.x += 1 / size / 2 * 600;
									successY.scale.x += 1 / size;
								}
							} else {
								successY = null;
							}
							failY = null;
							failZ = null;
							targetY = null;
							targetZ = null;
						} else if(!targetValue && currentValue) {
							var nextZ1 = z + 1;
							if(nextZ1 == size || !this.getCurrent(game,x,y,nextZ1) || this.getTarget(game,x,y,nextZ1)) {
								if(failZ == null) {
									var cube2 = this.getCube(count);
									this.setPlaneZ(cube2,x,y,z,size);
									this.setMaterial(cube2.material,16737894,0.1);
									failZ = cube2;
									++count;
								} else {
									failZ.position.x += 1 / size / 2 * 600;
									failZ.scale.x += 1 / size;
								}
							} else {
								failZ = null;
							}
							var nextY1 = y + 1;
							if(nextY1 == size || !this.getCurrent(game,x,nextY1,z) || this.getTarget(game,x,nextY1,z)) {
								if(failY == null) {
									var cube3 = this.getCube(count);
									this.setPlaneY(cube3,x,y,z,size);
									this.setMaterial(cube3.material,16737894,0.1);
									failY = cube3;
									++count;
								} else {
									failY.position.x += 1 / size / 2 * 600;
									failY.scale.x += 1 / size;
								}
							} else {
								failY = null;
							}
							successY = null;
							successZ = null;
							targetY = null;
							targetZ = null;
						} else if(targetValue && !currentValue) {
							var nextZ2 = z + 1;
							if(nextZ2 == size || !this.getTarget(game,x,y,nextZ2) || this.getCurrent(game,x,y,nextZ2)) {
								if(targetZ == null) {
									var cube4 = this.getCube(count);
									this.setPlaneZ(cube4,x,y,z,size);
									this.setMaterial(cube4.material,1179511,0.1);
									targetZ = cube4;
									++count;
								} else {
									targetZ.position.x += 1 / size / 2 * 600;
									targetZ.scale.x += 1 / size;
								}
							} else {
								targetZ = null;
							}
							var nextY2 = y + 1;
							if(nextY2 == size || !this.getTarget(game,x,nextY2,z) || this.getCurrent(game,x,nextY2,z)) {
								if(targetY == null) {
									var cube5 = this.getCube(count);
									this.setPlaneY(cube5,x,y,z,size);
									this.setMaterial(cube5.material,1179511,0.1);
									targetY = cube5;
									++count;
								} else {
									targetY.position.x += 1 / size / 2 * 600;
									targetY.scale.x += 1 / size;
								}
							} else {
								targetY = null;
							}
							failY = null;
							failZ = null;
							successY = null;
							successZ = null;
						} else {
							successY = null;
							successZ = null;
							failY = null;
							failZ = null;
							targetY = null;
							targetZ = null;
						}
					}
				}
			}
			this.setActiveCount(count);
			break;
		case 1:
			this.setActiveCount(0);
			break;
		}
		this.renderer.render(this.scene,this.camera);
	}
	,getCurrent: function(game,x,y,z) {
		var size = game.size;
		var _g = this.rootContext.rot;
		switch(_g) {
		case 0:
			return game.currentModel[x][y][z];
		case 1:
			return game.currentModel[z][y][size - x - 1];
		case 2:
			return game.currentModel[size - x - 1][y][size - z - 1];
		case 3:
			return game.currentModel[size - z - 1][y][x];
		default:
			throw new js__$Boot_HaxeError("unknown rot");
		}
	}
	,getTarget: function(game,x,y,z) {
		var size = game.size;
		var _g = this.rootContext.rot;
		switch(_g) {
		case 0:
			return game.targetModel[x][y][z];
		case 1:
			return game.targetModel[z][y][size - x - 1];
		case 2:
			return game.targetModel[size - x - 1][y][size - z - 1];
		case 3:
			return game.targetModel[size - z - 1][y][x];
		default:
			throw new js__$Boot_HaxeError("unknown rot");
		}
	}
	,getCube: function(index) {
		if(this.cubes.length <= index) {
			var geometry = new THREE.PlaneGeometry(600,600,1,1);
			var material = new THREE.MeshLambertMaterial({ color : 1170773});
			var cube = new THREE.Mesh(geometry,material);
			cube.castShadow = true;
			cube.receiveShadow = true;
			this.cubes.push(cube);
			this.scene.add(cube);
		}
		return this.cubes[index];
	}
	,setPlaneY: function(cube,x,y,z,size) {
		cube.position.set(x * 600 / size - 300,(y + 0.5) * 600 / size - 300,z * 600 / size - 300);
		var scale = 1 / size;
		cube.scale.set(scale * 0.95,scale * 0.95,scale);
		cube.rotation.set(-Math.PI / 2,0,0);
		cube.visible = true;
	}
	,setPlaneZ: function(cube,x,y,z,size) {
		cube.position.set(x * 600 / size - 300,y * 600 / size - 300,(z + 0.5) * 600 / size - 300);
		var scale = 1 / size;
		cube.scale.set(scale * 0.95,scale * 0.95,scale);
		cube.rotation.set(0,0,0);
		cube.visible = true;
	}
	,setMaterial: function(material,color,alpha) {
		material.color.setHex(color);
		material.opacity = alpha;
		material.transparent = true;
	}
	,setActiveCount: function(count) {
		var _g1 = count;
		var _g = this.activeCubes;
		while(_g1 < _g) {
			var i = _g1++;
			this.cubes[i].visible = false;
		}
		this.activeCubes = count;
	}
	,__class__: ThreeView
};
var Tracer = function(game,input) {
	this.energy = 0;
	this.position = 0;
	this.index = 0;
	this.game = game;
	game.init();
	this.stepLog = [];
	var currentStep = null;
	this.errorText = haxe_ds_Option.None;
	try {
		while(input.pos < input.totlen) {
			if(game.get_isStepTop()) {
				currentStep = new StepData(game.energy,game.getPreviousActives());
				this.stepLog.push(currentStep);
				game.startStep();
			}
			var command = _$Command_Command_$Impl_$.read(input);
			currentStep.commands.push(command);
			currentStep.backwardCommands.push(game.getBackwardCommand(command));
			game.forward(command);
		}
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,String) ) {
			this.errorText = haxe_ds_Option.Some(e);
		} else throw(e);
	}
	this.energy = game.energy;
	game.init();
};
Tracer.__name__ = true;
Tracer.prototype = {
	getDirection: function(value) {
		if(value == 1) {
			return 1;
		} else if(value == 2) {
			return 2;
		} else if(value == 3) {
			return 3;
		} else {
			throw new js__$Boot_HaxeError("unknown direction:" + value);
		}
	}
	,getNear: function(value) {
		return _$Near_Near_$Impl_$._new(value);
	}
	,'goto': function(nextIndex) {
		this.position = nextIndex;
		this.__goto(nextIndex);
	}
	,move: function(offset) {
		this.position += offset;
		this.__goto(this.position | 0);
	}
	,__goto: function(nextIndex) {
		if(this.stepLog.length < nextIndex) {
			nextIndex = this.stepLog.length;
			this.position = nextIndex;
		} else if(nextIndex < 0) {
			nextIndex = 0;
			this.position = 0;
		}
		while(this.index < nextIndex) {
			var step = this.stepLog[this.index];
			this.game.startStep();
			var _g = 0;
			var _g1 = step.commands;
			while(_g < _g1.length) {
				var command = _g1[_g];
				++_g;
				this.game.forward(command);
			}
			this.index++;
		}
		while(nextIndex < this.index) {
			this.index--;
			var step1 = this.stepLog[this.index];
			var len = step1.backwardCommands.length;
			if(this.game.getActiveBotsCount() != len) {
				throw new js__$Boot_HaxeError(Std.string(this.stepLog[this.index]) + "," + step1.backwardCommands.length);
			}
			var _g11 = 0;
			var _g2 = len;
			while(_g11 < _g2) {
				var i = _g11++;
				this.game.backward(step1.backwardCommands[len - 1 - i]);
			}
			this.game.revertStep(step1.energy,step1.previousActives);
		}
	}
	,__class__: Tracer
};
var StepData = function(energy,previousActives) {
	this.commands = [];
	this.backwardCommands = [];
	this.energy = energy;
	this.previousActives = previousActives;
};
StepData.__name__ = true;
StepData.prototype = {
	__class__: StepData
};
var UnionFind = function(size) {
	var this1 = new Array(size);
	this.data = this1;
	this.reset(size);
};
UnionFind.__name__ = true;
UnionFind.prototype = {
	unionSet: function(x,y) {
		if(this.data[x] < 0) {
			x = x;
		} else {
			x = this.data[x] = this.root(this.data[x]);
		}
		if(this.data[y] < 0) {
			y = y;
		} else {
			y = this.data[y] = this.root(this.data[y]);
		}
		if(x != y) {
			if(this.data[y] < this.data[x]) {
				var tmp = x;
				x = y;
				y = tmp;
			}
			var _g = x;
			var _g1 = this.data;
			_g1[_g] = _g1[_g] + this.data[y];
			this.data[y] = x;
		}
	}
	,findSet: function(x,y) {
		return (this.data[x] < 0 ? x : this.data[x] = this.root(this.data[x])) == (this.data[y] < 0 ? y : this.data[y] = this.root(this.data[y]));
	}
	,root: function(x) {
		if(this.data[x] < 0) {
			return x;
		} else {
			return this.data[x] = this.root(this.data[x]);
		}
	}
	,size: function(x) {
		return -this.data[this.data[x] < 0 ? x : this.data[x] = this.root(this.data[x])];
	}
	,reset: function(size) {
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			this.data[i] = -1;
		}
	}
	,isUnion: function() {
		var value = -1;
		var _g1 = 0;
		var _g = this.data.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.data[i] != -1) {
				if(value == -1) {
					if(this.data[i] < 0) {
						value = i;
					} else {
						value = this.data[i] = this.root(this.data[i]);
					}
				} else if(value != (this.data[i] < 0 ? i : this.data[i] = this.root(this.data[i]))) {
					return false;
				}
			}
		}
		return true;
	}
	,__class__: UnionFind
};
var haxe_Resource = function() { };
haxe_Resource.__name__ = true;
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var component_root_RootView = function(props) {
	React.Component.call(this,props);
};
component_root_RootView.__name__ = true;
component_root_RootView.__super__ = React.Component;
component_root_RootView.prototype = $extend(React.Component.prototype,{
	render: function() {
		var i = 0;
		var _g = this.props.context.tracer;
		var tmp;
		switch(_g[1]) {
		case 0:
			var tracer = _g[2];
			tmp = ["コマンド：",react_ReactStringTools.createElement("input",{ type : "range", value : tracer.index, min : 0, max : tracer.stepLog.length - 1, onChange : $bind(this,this.onRangeChange), style : { width : "800px"}}),tracer.index + "/" + tracer.stepLog.length + "ステップ"];
			break;
		case 1:
			tmp = [];
			break;
		}
		var tmp1 = react_ReactStringTools.createElement("div",{ },tmp);
		var _g1 = this.props.context.tracer;
		var tmp2;
		switch(_g1[1]) {
		case 0:
			var tracer1 = _g1[2];
			tmp2 = [react_ReactStringTools.createElement("button",{ name : "defaultTrace", onClick : $bind(this,this.onPlayClick)},this.props.context.playing ? "停止" : "再生")];
			break;
		case 1:
			tmp2 = [];
			break;
		}
		var tmp3 = react_ReactStringTools.createElement("div",{ },tmp2);
		var _g2 = this.props.context.tracer;
		var tmp4;
		switch(_g2[1]) {
		case 0:
			var tracer2 = _g2[2];
			tmp4 = ["再生速度",react_ReactStringTools.createElement("input",{ type : "range", value : this.props.context.speed, min : -200, max : 200, onChange : $bind(this,this.onSpeedChange), step : 0.01, style : { width : "400px"}}),react_ReactStringTools.createElement("input",{ type : "text", value : this.props.context.speed, onChange : $bind(this,this.onSpeedChange)})];
			break;
		case 1:
			tmp4 = [];
			break;
		}
		var tmp5 = react_ReactStringTools.createElement("div",{ },tmp4);
		var tmp6 = react_ReactStringTools.createElement("hr",{ });
		var _g3 = this.props.context.game;
		var tmp7;
		switch(_g3[1]) {
		case 0:
			var game = _g3[2];
			var tmp8 = ["サイズ(R):" + game.size,react_ReactStringTools.createElement("br",{ })];
			var _g31 = game.sourceModelInput;
			var tmp9;
			switch(_g31[1]) {
			case 0:
				tmp9 = ["バウンド"," X:" + (game.boundMaxX - game.boundMinX + 1)," Y:" + (game.boundMaxY - game.boundMinY + 1)," Z:" + (game.boundMaxZ - game.boundMinZ + 1),react_ReactStringTools.createElement("br",{ })];
				break;
			case 1:
				tmp9 = [];
				break;
			}
			var tmp10 = tmp8.concat(tmp9);
			var _g4 = game.targetModelInput;
			var tmp11;
			switch(_g4[1]) {
			case 0:
				tmp11 = ["ターゲットのバウンド"," X:" + (-game.targetMinX + game.targetMaxX + 1)," Y:" + (-game.targetMinY + game.targetMaxY + 1)," Z:" + (-game.targetMinZ + game.targetMaxZ + 1),react_ReactStringTools.createElement("br",{ })];
				break;
			case 1:
				tmp11 = [];
				break;
			}
			tmp7 = tmp10.concat(tmp11);
			break;
		case 1:
			tmp7 = [];
			break;
		}
		var tmp12 = react_ReactStringTools.createElement("div",{ },tmp7);
		var _g41 = this.props.context.tracer;
		var tmp13;
		switch(_g41[1]) {
		case 0:
			var tracer3 = _g41[2];
			tmp13 = ["エナジー:" + tracer3.game.energy,react_ReactStringTools.createElement("br",{ }),"ハーモニクス:" + (tracer3.game.highHarmonics ? "High" : "Low"),react_ReactStringTools.createElement("br",{ })];
			break;
		case 1:
			tmp13 = [];
			break;
		}
		var tmp14 = react_ReactStringTools.createElement("div",{ },tmp13);
		var _g5 = this.props.context.tracer;
		var tmp15;
		switch(_g5[1]) {
		case 0:
			var tracer4 = _g5[2];
			var _g51 = [];
			var _g6 = 0;
			var _g7 = tracer4.game.bots;
			while(_g6 < _g7.length) {
				var bot = _g7[_g6];
				++_g6;
				if(bot.isActive) {
					_g51.push("ボット" + (bot.id + 1) + ":" + bot.seeds.join(",") + "\n");
				}
			}
			tmp15 = _g51;
			break;
		case 1:
			tmp15 = [];
			break;
		}
		var tmp16 = react_ReactStringTools.createElement("pre",{ },tmp15);
		var tmp17 = react_ReactStringTools.createElement("hr",{ });
		var tmp18 = { name : "problem", onChange : $bind(this,this.onProblemSelect), disabled : this.props.context.loading};
		var _g61 = [];
		var _g71 = 0;
		var _g8 = this.props.context.problems;
		while(_g71 < _g8.length) {
			var problem = _g8[_g71];
			++_g71;
			_g61.push(react_ReactStringTools.createElement("option",{ value : problem, selected : this.props.context.name == problem},[problem]));
		}
		var tmp19 = react_ReactStringTools.createElement("select",tmp18,_g61);
		var tmp20 = react_ReactStringTools.createElement("br",{ });
		var tmp21 = react_ReactStringTools.createElement("button",{ name : "defaultTrace", onClick : $bind(this,this.onDefaultTraceClick), disabled : !this.props.context.get_startable()},"デフォルトトレース開始");
		var tmp22 = react_ReactStringTools.createElement("br",{ });
		var tmp23 = { type : "text", value : this.props.context.targetDir, onChange : $bind(this,this.onChangeTargetDir)};
		var _g72 = [];
		var _g81 = 0;
		var _g9 = component_root_RootView.outData;
		while(_g81 < _g9.length) {
			var problem1 = _g9[_g81];
			++_g81;
			_g72.push(react_ReactStringTools.createElement("option",{ value : "out/" + problem1, selected : this.props.context.name == problem1},["out/" + problem1]));
		}
		var tmp24 = react_ReactStringTools.createElement("select",tmp23,_g72);
		var tmp25 = react_ReactStringTools.createElement("button",{ name : "targetTrace", onClick : $bind(this,this.onTargetTraceClick)},"のディレクトリでトレース開始");
		var tmp26 = react_ReactStringTools.createElement("br",{ });
		var tmp27 = react_ReactStringTools.createElement("input",{ type : "text", value : this.props.context.targetFile, onChange : $bind(this,this.onChangeTargetFile)});
		var tmp28 = react_ReactStringTools.createElement("button",{ name : "targetTrace", onClick : $bind(this,this.onFileTraceClick)},"のファイルでトレース開始");
		var tmp29 = react_ReactStringTools.createElement("br",{ });
		var tmp30 = react_ReactStringTools.createElement("input",{ type : "file", accept : ".gz", onChange : $bind(this,this.onChangeUpfile)});
		var tmp31 = react_ReactStringTools.createElement("div",{ },[tmp19,tmp20,tmp21,tmp22,tmp24,tmp25,tmp26,tmp27,tmp28,tmp29,tmp30]);
		var tmp32 = react_ReactStringTools.createElement("button",{ name : "targetTrace", onClick : $bind(this,this.onTurnLeftClick)},"<<");
		var tmp33 = "左右回転:" + this.props.context.rot * 90 + "°";
		var tmp34 = react_ReactStringTools.createElement("button",{ name : "targetTrace", onClick : $bind(this,this.onTurnRightClick)},">>");
		var tmp35 = react_ReactStringTools.createElement("div",{ },[tmp32,tmp33,tmp34]);
		var tmp36 = react_ReactStringTools.createElement("input",{ type : "range", value : this.props.context.cameraAngle, min : 0, max : 1, onChange : $bind(this,this.onCameraAngleChange), step : 0.01, style : { width : "400px"}});
		var tmp37 = react_ReactStringTools.createElement("div",{ },["上下回転:",tmp36,this.props.context.cameraAngle]);
		var tmp38 = react_ReactStringTools.createElement("div",{ },this.props.context.errorText);
		var _g82 = this.props.context.tracer;
		var tmp39;
		switch(_g82[1]) {
		case 0:
			var tracer5 = _g82[2];
			var _g83 = tracer5.errorText;
			switch(_g83[1]) {
			case 0:
				var errorText = _g83[2];
				tmp39 = "error" + errorText;
				break;
			case 1:
				tmp39 = [];
				break;
			}
			break;
		case 1:
			tmp39 = [];
			break;
		}
		var tmp40 = react_ReactStringTools.createElement("div",{ "style" : { color : "#FF3333"}},tmp39);
		var tmp41 = react_ReactStringTools.createElement("div",{ },"version : 13");
		return react_ReactStringTools.createElement("div",{ className : "root"},[tmp1,tmp3,tmp5,tmp6,tmp12,tmp14,tmp16,tmp17,tmp31,tmp35,tmp37,tmp38,tmp40,tmp41]);
	}
	,onProblemSelect: function(e) {
		var selectElement = e.target;
		this.props.context.selectProblem(this.props.context.problems[selectElement.selectedIndex]);
		this.props.context.updateHash();
	}
	,onDefaultTraceClick: function(e) {
		this.props.context.startDefaultTrace();
	}
	,onRangeChange: function(e) {
		var range = e.target;
		this.props.context.gotoTrace(parseFloat(range.value) | 0);
	}
	,onPlayClick: function() {
		this.props.context.togglePlaying();
	}
	,onTargetTraceClick: function() {
		this.props.context.startTargetTrace();
	}
	,onFileTraceClick: function() {
		this.props.context.startFileTrace();
	}
	,onChangeTargetDir: function(e) {
		var input = e.target;
		this.props.context.changeTargetDir(input.value);
		this.props.context.updateHash();
	}
	,onChangeTargetFile: function(e) {
		var input = e.target;
		this.props.context.changeTargetFile(input.value);
		this.props.context.updateHash();
	}
	,onSpeedChange: function(e) {
		var range = e.target;
		this.props.context.changeSpeed(range.value);
	}
	,onTurnLeftClick: function(e) {
		this.props.context.turn(1);
	}
	,onTurnRightClick: function(e) {
		this.props.context.turn(3);
	}
	,onCameraAngleChange: function(e) {
		var range = e.target;
		this.props.context.changeCameraAngle(parseFloat(range.value));
	}
	,onChangeUpfile: function(e) {
		var input = e.target;
		this.props.context.changeUpfile(input.files[0]);
	}
	,__class__: component_root_RootView
});
var core_RootContext = function() {
	this.cameraAngle = 0.5;
	this.hash = null;
	this.problemNumber = Std.parseInt(haxe_Resource.getString("size"));
	this.problems = [];
	var _g1 = 1;
	var _g = 187;
	while(_g1 < _g) {
		var i = _g1++;
		this.problems.push("FA" + StringTools.lpad("" + i,"0",3));
	}
	var _g11 = 1;
	var _g2 = 187;
	while(_g11 < _g2) {
		var i1 = _g11++;
		this.problems.push("FD" + StringTools.lpad("" + i1,"0",3));
	}
	var _g12 = 1;
	var _g3 = 116;
	while(_g12 < _g3) {
		var i2 = _g12++;
		this.problems.push("FR" + StringTools.lpad("" + i2,"0",3));
	}
	this.game = haxe_ds_Option.None;
	this.tracer = haxe_ds_Option.None;
	this.loading = false;
	this.playing = true;
	this.speed = "1";
	this.targetDir = "";
	this.targetFile = "";
	this.rot = 0;
	this.name = "";
};
core_RootContext.__name__ = true;
core_RootContext.prototype = {
	get_startable: function() {
		if(!this.loading) {
			var _g = this.game;
			if(_g[1] == 0) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,onFrame: function(ms) {
		var hash = HxOverrides.substr(window.location.hash,1,null);
		var hash1 = HxOverrides.substr(window.location.hash,1,null);
		if(this.hash != hash1) {
			this.hash = hash1;
			try {
				var data = hash1 != "" ? JSON.parse(decodeURIComponent(hash1.split("+").join(" "))) : { };
				if(data.dir == null) {
					data.dir = window.localStorage.getItem("dir");
				}
				if(data.model == null) {
					data.model = window.localStorage.getItem("model");
				}
				if(data.file == null) {
					data.file = window.localStorage.getItem("file");
				}
				if(data.dir == null) {
					data.dir = "submission/nbt";
				}
				if(data.model == null) {
					data.model = "FA001";
				}
				if(data.file == null) {
					data.file = "out/default/" + Std.string(data.model) + ".nbt.gz";
				}
				this.changeTargetDir(data.dir);
				this.changeTargetFile(data.file);
				this.selectProblem(data.model);
				this.updateHash();
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				this.errorText = "エラー: " + Std.string(e);
			}
		}
		if(this.playing) {
			var _g = this.tracer;
			switch(_g[1]) {
			case 0:
				var tracer = _g[2];
				var prevIndex = tracer.index;
				tracer.move(parseFloat(this.speed));
				if(prevIndex != tracer.index) {
					this.updateUi();
					this.updateGraphic();
				}
				break;
			case 1:
				break;
			}
		}
	}
	,selectProblem: function(name) {
		var _gthis = this;
		if(this.name != name) {
			this.name = name;
			window.localStorage.setItem("model",name);
			this.tracer = haxe_ds_Option.None;
			this.game = haxe_ds_Option.None;
			this.loading = true;
			this.updateUi();
			this.updateGraphic();
			var xhr = new XMLHttpRequest();
			var file = "../../../problemsF/" + name + "_tgt.mdl";
			xhr.open("GET",file,true);
			xhr.responseType = "arraybuffer";
			xhr.onload = function(e) {
				if(xhr.status == 200) {
					var arrayBuffer = xhr.response;
					var tmp = haxe_ds_Option.Some(new haxe_io_BytesInput(haxe_io_Bytes.ofData(arrayBuffer)));
					_gthis.loadSourceProblem(name,tmp);
				} else {
					_gthis.loadSourceProblem(name,haxe_ds_Option.None);
				}
			};
			xhr.onerror = function(e1) {
			};
			xhr.send();
		}
	}
	,loadSourceProblem: function(name,target) {
		var _gthis = this;
		var xhr = new XMLHttpRequest();
		var file = "../../../problemsF/" + name + "_src.mdl";
		xhr.open("GET",file,true);
		xhr.responseType = "arraybuffer";
		xhr.onload = function(e) {
			if(xhr.status == 200) {
				var arrayBuffer = xhr.response;
				var tmp = haxe_ds_Option.Some(new haxe_io_BytesInput(haxe_io_Bytes.ofData(arrayBuffer)));
				_gthis.loadedProbrem(name,target,tmp);
			} else {
				_gthis.loadedProbrem(name,target,haxe_ds_Option.None);
			}
		};
		xhr.onerror = function(e1) {
		};
		xhr.send();
	}
	,startDefaultTrace: function() {
		this.startTrace("../../../out/default/" + this.name + ".nbt.gz");
	}
	,startTargetTrace: function() {
		this.startTrace("../../../" + this.targetDir + "/" + this.name + ".nbt.gz");
	}
	,startFileTrace: function() {
		this.startTrace("../../../" + this.targetFile);
	}
	,changeTargetDir: function(targetDir) {
		if(this.targetDir != targetDir) {
			this.targetDir = targetDir;
			window.localStorage.setItem("dir",targetDir);
			this.updateUi();
		}
	}
	,changeTargetFile: function(targetFile) {
		if(this.targetFile != targetFile) {
			this.targetFile = targetFile;
			window.localStorage.setItem("file",targetFile);
			this.updateUi();
		}
	}
	,changeUpfile: function(file) {
		var _gthis = this;
		var reader = new FileReader();
		this.loading = true;
		reader.onload = function(e) {
			var arrayBuffer = reader.result;
			var tmp = GZip.unzip(haxe_io_Bytes.ofData(arrayBuffer));
			_gthis.loadedTrace(new haxe_io_BytesInput(tmp));
		};
		reader.onerror = function(e1) {
			_gthis.loading = false;
			_gthis.errorText = "エラー: ファイル読み込みエラー:" + Std.string(file);
			_gthis.updateUi();
			_gthis.updateGraphic();
		};
		reader.readAsArrayBuffer(file);
	}
	,startTrace: function(file) {
		var _gthis = this;
		var xhr = new XMLHttpRequest();
		this.tracer = haxe_ds_Option.None;
		this.loading = true;
		this.updateUi();
		this.updateGraphic();
		xhr.open("GET",file,true);
		xhr.responseType = "arraybuffer";
		xhr.onload = function(e) {
			if(xhr.status == 200) {
				var arrayBuffer = xhr.response;
				var tmp = GZip.unzip(haxe_io_Bytes.ofData(arrayBuffer));
				_gthis.loadedTrace(new haxe_io_BytesInput(tmp));
			} else {
				_gthis.loading = false;
				_gthis.errorText = "エラー: ファイル読み込みエラー:" + file + " ステータス:" + xhr.status;
				_gthis.updateUi();
				_gthis.updateGraphic();
			}
		};
		xhr.onerror = function(e1) {
			_gthis.loading = false;
			_gthis.errorText = "エラー: ファイル読み込みエラー:" + file;
			_gthis.updateUi();
			_gthis.updateGraphic();
		};
		xhr.send();
	}
	,loadedProbrem: function(name,target,source) {
		this.game = haxe_ds_Option.Some(new Game(source,target));
		this.loading = false;
		this.updateUi();
		this.updateGraphic();
	}
	,loadedTrace: function(byteInput) {
		this.loading = false;
		var _g = this.game;
		switch(_g[1]) {
		case 0:
			var game = _g[2];
			this.tracer = haxe_ds_Option.Some(new Tracer(game,byteInput));
			break;
		case 1:
			break;
		}
		this.updateUi();
		this.updateGraphic();
	}
	,gotoTrace: function($int) {
		var _g = this.tracer;
		switch(_g[1]) {
		case 0:
			var tracer = _g[2];
			tracer["goto"]($int);
			break;
		case 1:
			break;
		}
		this.updateUi();
		this.updateGraphic();
	}
	,togglePlaying: function() {
		this.playing = !this.playing;
		this.updateUi();
		this.updateGraphic();
	}
	,changeSpeed: function(speed) {
		this.speed = speed;
		this.updateUi();
		this.updateGraphic();
	}
	,turn: function(i) {
		this.rot = (this.rot + i) % 4;
		this.updateUi();
		this.updateGraphic();
	}
	,changeCameraAngle: function(cameraAngle) {
		this.cameraAngle = cameraAngle;
		this.updateUi();
		this.updateGraphic();
	}
	,updateHash: function() {
	}
	,__class__: core_RootContext
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
haxe_crypto_Adler32.__name__ = true;
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var p = _g1++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_Option = { __ename__ : true, __constructs__ : ["Some","None"] };
haxe_ds_Option.Some = function(v) { var $x = ["Some",0,v]; $x.__enum__ = haxe_ds_Option; $x.toString = $estr; return $x; };
haxe_ds_Option.None = ["None",1];
haxe_ds_Option.None.toString = $estr;
haxe_ds_Option.None.__enum__ = haxe_ds_Option;
var haxe_io_BytesBuffer = function() {
	this.b = [];
};
haxe_io_BytesBuffer.__name__ = true;
haxe_io_BytesBuffer.prototype = {
	getBytes: function() {
		var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			if (eof instanceof js__$Boot_HaxeError) eof = eof.val;
			if( js_Boot.__instanceof(eof,haxe_io_Eof) ) {
			} else throw(eof);
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
haxe_io_BytesInput.__name__ = true;
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
haxe_io_BytesOutput.__name__ = true;
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.b.push(c);
	}
	,writeBytes: function(buf,pos,len) {
		var _this = this.b;
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b1 = _this.b;
		var b2 = buf.b;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			_this.b.push(b2[i]);
		}
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
var haxe_zip_Compress = function() { };
haxe_zip_Compress.__name__ = true;
haxe_zip_Compress.run = function(s,level) {
	throw new js__$Boot_HaxeError("Not implemented for this platform");
};
var haxe_zip_Huffman = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"] };
haxe_zip_Huffman.Found = function(i) { var $x = ["Found",0,i]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBit = function(left,right) { var $x = ["NeedBit",1,left,right]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBits = function(n,table) { var $x = ["NeedBits",2,n,table]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
var haxe_zip_HuffTools = function() {
};
haxe_zip_HuffTools.__name__ = true;
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t[1]) {
		case 0:
			return 0;
		case 1:
			var b = t[3];
			var a = t[2];
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			throw new js__$Boot_HaxeError("assert");
			break;
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t[1] == 1) {
				var b = t[3];
				var a = t[2];
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t[1] == 1) {
			var b = t[3];
			var a = t[2];
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var _g1 = 0;
		var _g = maxbits;
		while(_g1 < _g) {
			var i = _g1++;
			counts.push(0);
			tmp.push(0);
		}
		var _g11 = 0;
		var _g2 = nlengths;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) {
				throw new js__$Boot_HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g12 = 1;
		var _g3 = maxbits - 1;
		while(_g12 < _g3) {
			var i2 = _g12++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g13 = 0;
		var _g4 = nlengths;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
haxe_zip__$InflateImpl_Window.__name__ = true;
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"] };
haxe_zip__$InflateImpl_State.Head = ["Head",0];
haxe_zip__$InflateImpl_State.Head.toString = $estr;
haxe_zip__$InflateImpl_State.Head.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Block = ["Block",1];
haxe_zip__$InflateImpl_State.Block.toString = $estr;
haxe_zip__$InflateImpl_State.Block.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.CData = ["CData",2];
haxe_zip__$InflateImpl_State.CData.toString = $estr;
haxe_zip__$InflateImpl_State.CData.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Flat = ["Flat",3];
haxe_zip__$InflateImpl_State.Flat.toString = $estr;
haxe_zip__$InflateImpl_State.Flat.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Crc = ["Crc",4];
haxe_zip__$InflateImpl_State.Crc.toString = $estr;
haxe_zip__$InflateImpl_State.Crc.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Dist = ["Dist",5];
haxe_zip__$InflateImpl_State.Dist.toString = $estr;
haxe_zip__$InflateImpl_State.Dist.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.DistOne = ["DistOne",6];
haxe_zip__$InflateImpl_State.DistOne.toString = $estr;
haxe_zip__$InflateImpl_State.DistOne.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Done = ["Done",7];
haxe_zip__$InflateImpl_State.Done.toString = $estr;
haxe_zip__$InflateImpl_State.Done.__enum__ = haxe_zip__$InflateImpl_State;
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this["final"] = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	var _g = 0;
	while(_g < 19) {
		var i1 = _g++;
		this.lengths.push(-1);
	}
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
haxe_zip_InflateImpl.__name__ = true;
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		if(len < 0 || len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b1 = output.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i1 = _g1++;
			output.b.push(b2[i1]);
		}
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h[1]) {
		case 0:
			var n = h[2];
			return n;
		case 1:
			var b = h[3];
			var a = h[2];
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h[3];
			var n1 = h[2];
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		var _g = this.state;
		switch(_g[1]) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			console.log("cm:" + cm);
			if(cm != 8) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			var flags = this.input.readByte();
			console.log(flags);
			console.log(this.input.readInt32());
			console.log(this.input.readByte());
			console.log(this.input.readByte());
			console.log(this.input.readByte());
			if((flags & 1) != 0) {
				this.input.readInt16();
			}
			if((flags & 2) != 0) {
				var size = this.input.readInt16();
				this.input.read(size);
			}
			if((flags & 4) != 0) {
				while(this.input.readByte() != 0) {
				}
			}
			if((flags & 8) != 0) {
				while(this.input.readByte() != 0) {
				}
			}
			if((flags & 22) != 0) {
				this.input.read(12);
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this["final"] = this.getBit();
			var _g1 = this.getBits(2);
			switch(_g1) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g11 = 0;
				var _g2 = hclen;
				while(_g11 < _g2) {
					var i = _g11++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g3 = hclen;
				while(_g3 < 19) {
					var i1 = _g3++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g12 = 0;
				var _g4 = hlit + hdist;
				while(_g12 < _g4) {
					var i2 = _g12++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this["final"] ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this["final"] ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var js_three__$ArrayLike_ArrayLike_$Impl_$ = {};
js_three__$ArrayLike_ArrayLike_$Impl_$.__name__ = true;
js_three__$ArrayLike_ArrayLike_$Impl_$.get = function(this1,key) {
	return this1[key];
};
js_three__$ArrayLike_ArrayLike_$Impl_$.arrayWrite = function(this1,k,v) {
	this1[k] = v;
	return v;
};
var react__$ReactRef_ReactRef_$Impl_$ = {};
react__$ReactRef_ReactRef_$Impl_$.__name__ = true;
react__$ReactRef_ReactRef_$Impl_$.get_current = function(this1) {
	return this1.current;
};
var react_ReactTools = function() { };
react_ReactTools.__name__ = true;
react_ReactTools.createElement = function(type,attrs) {
	return React.createElement(type,attrs);
};
var react_ReactStringTools = function() { };
react_ReactStringTools.__name__ = true;
react_ReactStringTools.createElement = function(type,attrs,children0) {
	return React.createElement(type,attrs,children0);
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var $$tre = (typeof Symbol === "function" && Symbol.for && Symbol.for("react.element")) || 0xeac7;
haxe_Resource.content = [{ name : "out", data : "WyJkZWZhdWx0IiwiaGFzaTEwIiwiaGFzaTExIiwiaGFzaTEyIiwiaGFzaTEzIiwiaGFzaTE1IiwiaGFzaTE2IiwiaGFzaTE3IiwiaGFzaTE4IiwiaGFzaTE5IiwiaGFzaTIwIiwiaGFzaTIxIiwiaGFzaTIyIiwiaGFzaTIzIiwiaGFzaTY2NiIsImhhc2k4IiwiaGFzaTkiLCJqb2huaWVsMyIsImpvaG5pZWw0Iiwiam9obmllbDUiLCJqb2huaWVsNiIsImpvaG5pZWw3Iiwiam9obmllbDgiLCJqb2huaWVsOSIsInNoaW9zaGlvdGExMiIsInNoaW9zaGlvdGExMyIsInNoaW9zaGlvdGExNCIsInNoaW9zaGlvdGExNiIsInNoaW9zaGlvdGExNyIsInNoaW9zaGlvdGExOCIsInNoaW9zaGlvdGExOSJd"}];
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
Bot.MAX = 40;
_$CommandKind_CommandKind_$Impl_$.Halt = 0;
_$CommandKind_CommandKind_$Impl_$.Flip = 1;
_$CommandKind_CommandKind_$Impl_$.Wait = 2;
_$CommandKind_CommandKind_$Impl_$.SMove = 3;
_$CommandKind_CommandKind_$Impl_$.LMove = 4;
_$CommandKind_CommandKind_$Impl_$.Fission = 5;
_$CommandKind_CommandKind_$Impl_$.Fill = 6;
_$CommandKind_CommandKind_$Impl_$.SVoid = 7;
_$CommandKind_CommandKind_$Impl_$.FusionP = 8;
_$CommandKind_CommandKind_$Impl_$.FusionS = 9;
_$CommandKind_CommandKind_$Impl_$.GFill = 10;
_$CommandKind_CommandKind_$Impl_$.GVoid = 11;
_$Direction_Direction_$Impl_$.X = 1;
_$Direction_Direction_$Impl_$.Y = 2;
_$Direction_Direction_$Impl_$.Z = 3;
_$Near_Near_$Impl_$.all = [_$Near_Near_$Impl_$.fromXyz(-1,-1,0),_$Near_Near_$Impl_$.fromXyz(0,-1,-1),_$Near_Near_$Impl_$.fromXyz(-1,0,-1),_$Near_Near_$Impl_$.fromXyz(-1,0,0),_$Near_Near_$Impl_$.fromXyz(0,-1,0),_$Near_Near_$Impl_$.fromXyz(0,0,-1),_$Near_Near_$Impl_$.fromXyz(1,-1,0),_$Near_Near_$Impl_$.fromXyz(0,1,-1),_$Near_Near_$Impl_$.fromXyz(1,0,-1),_$Near_Near_$Impl_$.fromXyz(-1,1,0),_$Near_Near_$Impl_$.fromXyz(0,-1,1),_$Near_Near_$Impl_$.fromXyz(-1,0,1),_$Near_Near_$Impl_$.fromXyz(1,1,0),_$Near_Near_$Impl_$.fromXyz(0,1,1),_$Near_Near_$Impl_$.fromXyz(1,0,1),_$Near_Near_$Impl_$.fromXyz(1,0,0),_$Near_Near_$Impl_$.fromXyz(0,1,0),_$Near_Near_$Impl_$.fromXyz(0,0,1)];
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
component_root_RootView.outData = JSON.parse(haxe_Resource.getString("out"));
component_root_RootView.displayName = "RootView";
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
